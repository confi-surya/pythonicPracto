// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_type_enum.proto

#ifndef PROTOBUF_message_5ftype_5fenum_2eproto__INCLUDED
#define PROTOBUF_message_5ftype_5fenum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace messageTypeEnum {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_5ftype_5fenum_2eproto();
void protobuf_AssignDesc_message_5ftype_5fenum_2eproto();
void protobuf_ShutdownFile_message_5ftype_5fenum_2eproto();

class typeEnums;

enum typeEnums_mapping {
  typeEnums_mapping_HEART_BEAT = 1,
  typeEnums_mapping_HEART_BEAT_ACK = 2,
  typeEnums_mapping_OSD_START_MONITORING = 3,
  typeEnums_mapping_OSD_START_MONITORING_ACK = 4,
  typeEnums_mapping_RECV_PROC_START_MONITORING = 5,
  typeEnums_mapping_RECV_PROC_START_MONITORING_ACK = 6,
  typeEnums_mapping_LL_START_MONITORING = 7,
  typeEnums_mapping_LL_START_MONITORING_ACK = 8,
  typeEnums_mapping_GET_GLOBAL_MAP = 9,
  typeEnums_mapping_GLOBAL_MAP_INFO = 10,
  typeEnums_mapping_COMP_TRANSFER_INFO = 11,
  typeEnums_mapping_COMP_TRANSFER_INFO_ACK = 12,
  typeEnums_mapping_COMP_TRANSFER_FINAL_STAT = 13,
  typeEnums_mapping_COMP_TRANSFER_FINAL_STAT_ACK = 14,
  typeEnums_mapping_GET_SERVICE_COMPONENT = 15,
  typeEnums_mapping_GET_SERVICE_COMPONENT_ACK = 16,
  typeEnums_mapping_TRANSFER_COMPONENT = 17,
  typeEnums_mapping_TRANSFER_COMPONENT_RESPONSE = 18,
  typeEnums_mapping_GET_OBJECT_VERSION = 19,
  typeEnums_mapping_GET_OBJECT_VERSION_ACK = 20,
  typeEnums_mapping_NODE_ADDITION_CLI = 50,
  typeEnums_mapping_NODE_ADDITION_CLI_ACK = 51,
  typeEnums_mapping_NODE_ADDITION_GL = 52,
  typeEnums_mapping_NODE_ADDITION_GL_ACK = 53,
  typeEnums_mapping_NODE_RETIRE = 54,
  typeEnums_mapping_NODE_RETIRE_ACK = 55,
  typeEnums_mapping_NODE_SYSTEM_STOP_CLI = 56,
  typeEnums_mapping_LOCAL_NODE_STATUS = 57,
  typeEnums_mapping_LOCAL_NODE_STATUS_ACK = 58,
  typeEnums_mapping_NODE_STATUS = 59,
  typeEnums_mapping_NODE_STATUS_ACK = 60,
  typeEnums_mapping_NODE_STOP_CLI = 61,
  typeEnums_mapping_NODE_STOP_CLI_ACK = 62,
  typeEnums_mapping_STOP_SERVICES = 63,
  typeEnums_mapping_STOP_SERVICES_ACK = 64,
  typeEnums_mapping_NODE_FAILOVER = 65,
  typeEnums_mapping_NODE_FAILOVER_ACK = 66,
  typeEnums_mapping_TAKE_GL_OWNERSHIP = 67,
  typeEnums_mapping_TAKE_GL_OWNERSHIP_ACK = 68,
  typeEnums_mapping_BLOCK_NEW_REQUESTS = 69,
  typeEnums_mapping_BLOCK_NEW_REQUESTS_ACK = 70,
  typeEnums_mapping_NODE_DELETION = 71,
  typeEnums_mapping_NODE_DELETION_ACK = 72,
  typeEnums_mapping_NODE_REJOIN_AFTER_RECOVERY = 73,
  typeEnums_mapping_NODE_REJOIN_AFTER_RECOVERY_ACK = 74,
  typeEnums_mapping_GET_CLUSTER_STATUS = 75,
  typeEnums_mapping_GET_CLUSTER_STATUS_ACK = 76,
  typeEnums_mapping_NODE_STOP_LL = 77,
  typeEnums_mapping_NODE_STOP_LL_ACK = 78,
  typeEnums_mapping_CONTAINER_UPDATE = 79,
  typeEnums_mapping_RELEASE_TRANSACTION_LOCK = 80,
  typeEnums_mapping_STATUS_ACK = 81,
  typeEnums_mapping_NODE_ADDITION_FINAL_ACK = 82,
  typeEnums_mapping_INITIATE_CLUSTER_RECOVERY = 83,
  typeEnums_mapping_ERROR_MSG = 255
};
bool typeEnums_mapping_IsValid(int value);
const typeEnums_mapping typeEnums_mapping_mapping_MIN = typeEnums_mapping_HEART_BEAT;
const typeEnums_mapping typeEnums_mapping_mapping_MAX = typeEnums_mapping_ERROR_MSG;
const int typeEnums_mapping_mapping_ARRAYSIZE = typeEnums_mapping_mapping_MAX + 1;

const ::google::protobuf::EnumDescriptor* typeEnums_mapping_descriptor();
inline const ::std::string& typeEnums_mapping_Name(typeEnums_mapping value) {
  return ::google::protobuf::internal::NameOfEnum(
    typeEnums_mapping_descriptor(), value);
}
inline bool typeEnums_mapping_Parse(
    const ::std::string& name, typeEnums_mapping* value) {
  return ::google::protobuf::internal::ParseNamedEnum<typeEnums_mapping>(
    typeEnums_mapping_descriptor(), name, value);
}
// ===================================================================

class typeEnums : public ::google::protobuf::Message {
 public:
  typeEnums();
  virtual ~typeEnums();
  
  typeEnums(const typeEnums& from);
  
  inline typeEnums& operator=(const typeEnums& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const typeEnums& default_instance();
  
  void Swap(typeEnums* other);
  
  // implements Message ----------------------------------------------
  
  typeEnums* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const typeEnums& from);
  void MergeFrom(const typeEnums& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef typeEnums_mapping mapping;
  static const mapping HEART_BEAT = typeEnums_mapping_HEART_BEAT;
  static const mapping HEART_BEAT_ACK = typeEnums_mapping_HEART_BEAT_ACK;
  static const mapping OSD_START_MONITORING = typeEnums_mapping_OSD_START_MONITORING;
  static const mapping OSD_START_MONITORING_ACK = typeEnums_mapping_OSD_START_MONITORING_ACK;
  static const mapping RECV_PROC_START_MONITORING = typeEnums_mapping_RECV_PROC_START_MONITORING;
  static const mapping RECV_PROC_START_MONITORING_ACK = typeEnums_mapping_RECV_PROC_START_MONITORING_ACK;
  static const mapping LL_START_MONITORING = typeEnums_mapping_LL_START_MONITORING;
  static const mapping LL_START_MONITORING_ACK = typeEnums_mapping_LL_START_MONITORING_ACK;
  static const mapping GET_GLOBAL_MAP = typeEnums_mapping_GET_GLOBAL_MAP;
  static const mapping GLOBAL_MAP_INFO = typeEnums_mapping_GLOBAL_MAP_INFO;
  static const mapping COMP_TRANSFER_INFO = typeEnums_mapping_COMP_TRANSFER_INFO;
  static const mapping COMP_TRANSFER_INFO_ACK = typeEnums_mapping_COMP_TRANSFER_INFO_ACK;
  static const mapping COMP_TRANSFER_FINAL_STAT = typeEnums_mapping_COMP_TRANSFER_FINAL_STAT;
  static const mapping COMP_TRANSFER_FINAL_STAT_ACK = typeEnums_mapping_COMP_TRANSFER_FINAL_STAT_ACK;
  static const mapping GET_SERVICE_COMPONENT = typeEnums_mapping_GET_SERVICE_COMPONENT;
  static const mapping GET_SERVICE_COMPONENT_ACK = typeEnums_mapping_GET_SERVICE_COMPONENT_ACK;
  static const mapping TRANSFER_COMPONENT = typeEnums_mapping_TRANSFER_COMPONENT;
  static const mapping TRANSFER_COMPONENT_RESPONSE = typeEnums_mapping_TRANSFER_COMPONENT_RESPONSE;
  static const mapping GET_OBJECT_VERSION = typeEnums_mapping_GET_OBJECT_VERSION;
  static const mapping GET_OBJECT_VERSION_ACK = typeEnums_mapping_GET_OBJECT_VERSION_ACK;
  static const mapping NODE_ADDITION_CLI = typeEnums_mapping_NODE_ADDITION_CLI;
  static const mapping NODE_ADDITION_CLI_ACK = typeEnums_mapping_NODE_ADDITION_CLI_ACK;
  static const mapping NODE_ADDITION_GL = typeEnums_mapping_NODE_ADDITION_GL;
  static const mapping NODE_ADDITION_GL_ACK = typeEnums_mapping_NODE_ADDITION_GL_ACK;
  static const mapping NODE_RETIRE = typeEnums_mapping_NODE_RETIRE;
  static const mapping NODE_RETIRE_ACK = typeEnums_mapping_NODE_RETIRE_ACK;
  static const mapping NODE_SYSTEM_STOP_CLI = typeEnums_mapping_NODE_SYSTEM_STOP_CLI;
  static const mapping LOCAL_NODE_STATUS = typeEnums_mapping_LOCAL_NODE_STATUS;
  static const mapping LOCAL_NODE_STATUS_ACK = typeEnums_mapping_LOCAL_NODE_STATUS_ACK;
  static const mapping NODE_STATUS = typeEnums_mapping_NODE_STATUS;
  static const mapping NODE_STATUS_ACK = typeEnums_mapping_NODE_STATUS_ACK;
  static const mapping NODE_STOP_CLI = typeEnums_mapping_NODE_STOP_CLI;
  static const mapping NODE_STOP_CLI_ACK = typeEnums_mapping_NODE_STOP_CLI_ACK;
  static const mapping STOP_SERVICES = typeEnums_mapping_STOP_SERVICES;
  static const mapping STOP_SERVICES_ACK = typeEnums_mapping_STOP_SERVICES_ACK;
  static const mapping NODE_FAILOVER = typeEnums_mapping_NODE_FAILOVER;
  static const mapping NODE_FAILOVER_ACK = typeEnums_mapping_NODE_FAILOVER_ACK;
  static const mapping TAKE_GL_OWNERSHIP = typeEnums_mapping_TAKE_GL_OWNERSHIP;
  static const mapping TAKE_GL_OWNERSHIP_ACK = typeEnums_mapping_TAKE_GL_OWNERSHIP_ACK;
  static const mapping BLOCK_NEW_REQUESTS = typeEnums_mapping_BLOCK_NEW_REQUESTS;
  static const mapping BLOCK_NEW_REQUESTS_ACK = typeEnums_mapping_BLOCK_NEW_REQUESTS_ACK;
  static const mapping NODE_DELETION = typeEnums_mapping_NODE_DELETION;
  static const mapping NODE_DELETION_ACK = typeEnums_mapping_NODE_DELETION_ACK;
  static const mapping NODE_REJOIN_AFTER_RECOVERY = typeEnums_mapping_NODE_REJOIN_AFTER_RECOVERY;
  static const mapping NODE_REJOIN_AFTER_RECOVERY_ACK = typeEnums_mapping_NODE_REJOIN_AFTER_RECOVERY_ACK;
  static const mapping GET_CLUSTER_STATUS = typeEnums_mapping_GET_CLUSTER_STATUS;
  static const mapping GET_CLUSTER_STATUS_ACK = typeEnums_mapping_GET_CLUSTER_STATUS_ACK;
  static const mapping NODE_STOP_LL = typeEnums_mapping_NODE_STOP_LL;
  static const mapping NODE_STOP_LL_ACK = typeEnums_mapping_NODE_STOP_LL_ACK;
  static const mapping CONTAINER_UPDATE = typeEnums_mapping_CONTAINER_UPDATE;
  static const mapping RELEASE_TRANSACTION_LOCK = typeEnums_mapping_RELEASE_TRANSACTION_LOCK;
  static const mapping STATUS_ACK = typeEnums_mapping_STATUS_ACK;
  static const mapping NODE_ADDITION_FINAL_ACK = typeEnums_mapping_NODE_ADDITION_FINAL_ACK;
  static const mapping INITIATE_CLUSTER_RECOVERY = typeEnums_mapping_INITIATE_CLUSTER_RECOVERY;
  static const mapping ERROR_MSG = typeEnums_mapping_ERROR_MSG;
  static inline bool mapping_IsValid(int value) {
    return typeEnums_mapping_IsValid(value);
  }
  static const mapping mapping_MIN =
    typeEnums_mapping_mapping_MIN;
  static const mapping mapping_MAX =
    typeEnums_mapping_mapping_MAX;
  static const int mapping_ARRAYSIZE =
    typeEnums_mapping_mapping_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  mapping_descriptor() {
    return typeEnums_mapping_descriptor();
  }
  static inline const ::std::string& mapping_Name(mapping value) {
    return typeEnums_mapping_Name(value);
  }
  static inline bool mapping_Parse(const ::std::string& name,
      mapping* value) {
    return typeEnums_mapping_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .messageTypeEnum.typeEnums.mapping type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::messageTypeEnum::typeEnums_mapping type() const;
  inline void set_type(::messageTypeEnum::typeEnums_mapping value);
  
  // @@protoc_insertion_point(class_scope:messageTypeEnum.typeEnums)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_5ftype_5fenum_2eproto();
  friend void protobuf_AssignDesc_message_5ftype_5fenum_2eproto();
  friend void protobuf_ShutdownFile_message_5ftype_5fenum_2eproto();
  
  void InitAsDefaultInstance();
  static typeEnums* default_instance_;
};
// ===================================================================


// ===================================================================

// typeEnums

// optional .messageTypeEnum.typeEnums.mapping type = 1;
inline bool typeEnums::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void typeEnums::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void typeEnums::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void typeEnums::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::messageTypeEnum::typeEnums_mapping typeEnums::type() const {
  return static_cast< ::messageTypeEnum::typeEnums_mapping >(type_);
}
inline void typeEnums::set_type(::messageTypeEnum::typeEnums_mapping value) {
  GOOGLE_DCHECK(::messageTypeEnum::typeEnums_mapping_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messageTypeEnum

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messageTypeEnum::typeEnums_mapping>() {
  return ::messageTypeEnum::typeEnums_mapping_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5ftype_5fenum_2eproto__INCLUDED
