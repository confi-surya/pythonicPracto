// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "communication/message_binding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network_messages {

namespace {

const ::google::protobuf::Descriptor* service_obj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  service_obj_reflection_ = NULL;
const ::google::protobuf::Descriptor* errorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  errorStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* heartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  heartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* heartBeatAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  heartBeatAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopProxyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopProxyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockRequestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockRequestAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferComponentsAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferComponentsAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferComponentsAck_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferComponentsAck_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceComponentAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceComponentAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGlobalMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGlobalMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalMapInfo_service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalMapInfo_service_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalLeaderStartMonitoring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalLeaderStartMonitoring_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalLeaderStartMonitoringAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalLeaderStartMonitoringAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdStartMonitoring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdStartMonitoring_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdStartMonitoringAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdStartMonitoringAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvProcStartMonitoring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvProcStartMonitoring_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvProcStartMonitoringAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvProcStartMonitoringAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvProcStartMonitoringAck_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvProcStartMonitoringAck_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompTransferInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompTransferInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompTransferInfo_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompTransferInfo_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompTranferFinalStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompTranferFinalStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompTranferFinalStat_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompTranferFinalStat_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferComp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferComp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferComp_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferComp_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeAdditionCli_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeAdditionCli_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeAdditionCliAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeAdditionCliAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeAdditionCliAck_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeAdditionCliAck_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeAdditionGl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeAdditionGl_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeAdditionGlAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeAdditionGlAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStopLL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStopLL_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStopLLAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStopLLAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeRetire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRetire_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeRetireAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRetireAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeDeletionCli_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDeletionCli_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeDeletionCliAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDeletionCliAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeSystemStopCli_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeSystemStopCli_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalNodeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalNodeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStatusAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStatusAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStopCli_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStopCli_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStopCliAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStopCliAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopServices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopServices_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopServicesAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopServicesAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeFailover_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeFailover_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeFailoverAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeFailoverAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeGlOwnership_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeGlOwnership_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeGlOwnershipAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeGlOwnershipAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetObjectVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetObjectVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetObjectVersionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetObjectVersionAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeRejoinAfterRecovery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRejoinAfterRecovery_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeRejoinAfterRecoveryAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRejoinAfterRecoveryAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterStatusAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterStatusAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterStatusAck_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterStatusAck_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseTransactionLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseTransactionLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeAdditionFinalAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeAdditionFinalAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeStatusEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto() {
  protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "src/communication_protocol/message_binding.proto");
  GOOGLE_CHECK(file != NULL);
  service_obj_descriptor_ = file->message_type(0);
  static const int service_obj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(service_obj, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(service_obj, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(service_obj, port_),
  };
  service_obj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      service_obj_descriptor_,
      service_obj::default_instance_,
      service_obj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(service_obj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(service_obj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(service_obj));
  errorStatus_descriptor_ = file->message_type(1);
  static const int errorStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(errorStatus, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(errorStatus, msg_),
  };
  errorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      errorStatus_descriptor_,
      errorStatus::default_instance_,
      errorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(errorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(errorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(errorStatus));
  heartBeat_descriptor_ = file->message_type(2);
  static const int heartBeat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeat, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeat, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeat, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeat, hfs_stat_),
  };
  heartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      heartBeat_descriptor_,
      heartBeat::default_instance_,
      heartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(heartBeat));
  heartBeatAck_descriptor_ = file->message_type(3);
  static const int heartBeatAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeatAck, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeatAck, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeatAck, node_stat_),
  };
  heartBeatAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      heartBeatAck_descriptor_,
      heartBeatAck::default_instance_,
      heartBeatAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeatAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartBeatAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(heartBeatAck));
  StopProxyAck_descriptor_ = file->message_type(4);
  static const int StopProxyAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopProxyAck, err_),
  };
  StopProxyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopProxyAck_descriptor_,
      StopProxyAck::default_instance_,
      StopProxyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopProxyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopProxyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopProxyAck));
  BlockRequestAck_descriptor_ = file->message_type(5);
  static const int BlockRequestAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequestAck, status_),
  };
  BlockRequestAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockRequestAck_descriptor_,
      BlockRequestAck::default_instance_,
      BlockRequestAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequestAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequestAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockRequestAck));
  TransferComponentsAck_descriptor_ = file->message_type(6);
  static const int TransferComponentsAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComponentsAck, comp_status_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComponentsAck, final_status_),
  };
  TransferComponentsAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferComponentsAck_descriptor_,
      TransferComponentsAck::default_instance_,
      TransferComponentsAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComponentsAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComponentsAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferComponentsAck));
  TransferComponentsAck_pair_descriptor_ = TransferComponentsAck_descriptor_->nested_type(0);
  static const int TransferComponentsAck_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComponentsAck_pair, component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComponentsAck_pair, status_),
  };
  TransferComponentsAck_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferComponentsAck_pair_descriptor_,
      TransferComponentsAck_pair::default_instance_,
      TransferComponentsAck_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComponentsAck_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComponentsAck_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferComponentsAck_pair));
  GetServiceComponentAck_descriptor_ = file->message_type(7);
  static const int GetServiceComponentAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceComponentAck, component_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceComponentAck, err_),
  };
  GetServiceComponentAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceComponentAck_descriptor_,
      GetServiceComponentAck::default_instance_,
      GetServiceComponentAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceComponentAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceComponentAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceComponentAck));
  GetServiceComponent_descriptor_ = file->message_type(8);
  static const int GetServiceComponent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceComponent, service_id_),
  };
  GetServiceComponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceComponent_descriptor_,
      GetServiceComponent::default_instance_,
      GetServiceComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceComponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceComponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceComponent));
  GetGlobalMap_descriptor_ = file->message_type(9);
  static const int GetGlobalMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGlobalMap, service_id_),
  };
  GetGlobalMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGlobalMap_descriptor_,
      GetGlobalMap::default_instance_,
      GetGlobalMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGlobalMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGlobalMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGlobalMap));
  GlobalMapInfo_descriptor_ = file->message_type(10);
  static const int GlobalMapInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo, updater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo, status_),
  };
  GlobalMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalMapInfo_descriptor_,
      GlobalMapInfo::default_instance_,
      GlobalMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalMapInfo));
  GlobalMapInfo_service_descriptor_ = GlobalMapInfo_descriptor_->nested_type(0);
  static const int GlobalMapInfo_service_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo_service, service_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo_service, version_),
  };
  GlobalMapInfo_service_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalMapInfo_service_descriptor_,
      GlobalMapInfo_service::default_instance_,
      GlobalMapInfo_service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo_service, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalMapInfo_service, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalMapInfo_service));
  LocalLeaderStartMonitoring_descriptor_ = file->message_type(11);
  static const int LocalLeaderStartMonitoring_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalLeaderStartMonitoring, service_id_),
  };
  LocalLeaderStartMonitoring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalLeaderStartMonitoring_descriptor_,
      LocalLeaderStartMonitoring::default_instance_,
      LocalLeaderStartMonitoring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalLeaderStartMonitoring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalLeaderStartMonitoring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalLeaderStartMonitoring));
  LocalLeaderStartMonitoringAck_descriptor_ = file->message_type(12);
  static const int LocalLeaderStartMonitoringAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalLeaderStartMonitoringAck, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalLeaderStartMonitoringAck, status_),
  };
  LocalLeaderStartMonitoringAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalLeaderStartMonitoringAck_descriptor_,
      LocalLeaderStartMonitoringAck::default_instance_,
      LocalLeaderStartMonitoringAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalLeaderStartMonitoringAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalLeaderStartMonitoringAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalLeaderStartMonitoringAck));
  OsdStartMonitoring_descriptor_ = file->message_type(13);
  static const int OsdStartMonitoring_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartMonitoring, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartMonitoring, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartMonitoring, ip_),
  };
  OsdStartMonitoring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdStartMonitoring_descriptor_,
      OsdStartMonitoring::default_instance_,
      OsdStartMonitoring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartMonitoring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartMonitoring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdStartMonitoring));
  OsdStartMonitoringAck_descriptor_ = file->message_type(14);
  static const int OsdStartMonitoringAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartMonitoringAck, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartMonitoringAck, error_),
  };
  OsdStartMonitoringAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdStartMonitoringAck_descriptor_,
      OsdStartMonitoringAck::default_instance_,
      OsdStartMonitoringAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartMonitoringAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartMonitoringAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdStartMonitoringAck));
  RecvProcStartMonitoring_descriptor_ = file->message_type(15);
  static const int RecvProcStartMonitoring_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoring, proc_id_),
  };
  RecvProcStartMonitoring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvProcStartMonitoring_descriptor_,
      RecvProcStartMonitoring::default_instance_,
      RecvProcStartMonitoring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvProcStartMonitoring));
  RecvProcStartMonitoringAck_descriptor_ = file->message_type(16);
  static const int RecvProcStartMonitoringAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoringAck, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoringAck, source_service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoringAck, status_),
  };
  RecvProcStartMonitoringAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvProcStartMonitoringAck_descriptor_,
      RecvProcStartMonitoringAck::default_instance_,
      RecvProcStartMonitoringAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoringAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoringAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvProcStartMonitoringAck));
  RecvProcStartMonitoringAck_entry_descriptor_ = RecvProcStartMonitoringAck_descriptor_->nested_type(0);
  static const int RecvProcStartMonitoringAck_entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoringAck_entry, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoringAck_entry, component_list_),
  };
  RecvProcStartMonitoringAck_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvProcStartMonitoringAck_entry_descriptor_,
      RecvProcStartMonitoringAck_entry::default_instance_,
      RecvProcStartMonitoringAck_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoringAck_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvProcStartMonitoringAck_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvProcStartMonitoringAck_entry));
  CompTransferInfo_descriptor_ = file->message_type(17);
  static const int CompTransferInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTransferInfo, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTransferInfo, component_service_pair_),
  };
  CompTransferInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompTransferInfo_descriptor_,
      CompTransferInfo::default_instance_,
      CompTransferInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTransferInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTransferInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompTransferInfo));
  CompTransferInfo_pair_descriptor_ = CompTransferInfo_descriptor_->nested_type(0);
  static const int CompTransferInfo_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTransferInfo_pair, component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTransferInfo_pair, dest_service_),
  };
  CompTransferInfo_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompTransferInfo_pair_descriptor_,
      CompTransferInfo_pair::default_instance_,
      CompTransferInfo_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTransferInfo_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTransferInfo_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompTransferInfo_pair));
  CompTranferFinalStat_descriptor_ = file->message_type(18);
  static const int CompTranferFinalStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTranferFinalStat, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTranferFinalStat, comp_status_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTranferFinalStat, final_status_),
  };
  CompTranferFinalStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompTranferFinalStat_descriptor_,
      CompTranferFinalStat::default_instance_,
      CompTranferFinalStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTranferFinalStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTranferFinalStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompTranferFinalStat));
  CompTranferFinalStat_pair_descriptor_ = CompTranferFinalStat_descriptor_->nested_type(0);
  static const int CompTranferFinalStat_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTranferFinalStat_pair, component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTranferFinalStat_pair, status_),
  };
  CompTranferFinalStat_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompTranferFinalStat_pair_descriptor_,
      CompTranferFinalStat_pair::default_instance_,
      CompTranferFinalStat_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTranferFinalStat_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompTranferFinalStat_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompTranferFinalStat_pair));
  TransferComp_descriptor_ = file->message_type(19);
  static const int TransferComp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComp, service_comp_list_),
  };
  TransferComp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferComp_descriptor_,
      TransferComp::default_instance_,
      TransferComp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferComp));
  TransferComp_pair_descriptor_ = TransferComp_descriptor_->nested_type(0);
  static const int TransferComp_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComp_pair, dest_service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComp_pair, component_),
  };
  TransferComp_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferComp_pair_descriptor_,
      TransferComp_pair::default_instance_,
      TransferComp_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComp_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferComp_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferComp_pair));
  NodeAdditionCli_descriptor_ = file->message_type(20);
  static const int NodeAdditionCli_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCli, node_list_),
  };
  NodeAdditionCli_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeAdditionCli_descriptor_,
      NodeAdditionCli::default_instance_,
      NodeAdditionCli_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCli, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCli, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeAdditionCli));
  NodeAdditionCliAck_descriptor_ = file->message_type(21);
  static const int NodeAdditionCliAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCliAck, node_ack_list_),
  };
  NodeAdditionCliAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeAdditionCliAck_descriptor_,
      NodeAdditionCliAck::default_instance_,
      NodeAdditionCliAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCliAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCliAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeAdditionCliAck));
  NodeAdditionCliAck_pair_descriptor_ = NodeAdditionCliAck_descriptor_->nested_type(0);
  static const int NodeAdditionCliAck_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCliAck_pair, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCliAck_pair, node_),
  };
  NodeAdditionCliAck_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeAdditionCliAck_pair_descriptor_,
      NodeAdditionCliAck_pair::default_instance_,
      NodeAdditionCliAck_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCliAck_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionCliAck_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeAdditionCliAck_pair));
  NodeAdditionGl_descriptor_ = file->message_type(22);
  static const int NodeAdditionGl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionGl, service_id_),
  };
  NodeAdditionGl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeAdditionGl_descriptor_,
      NodeAdditionGl::default_instance_,
      NodeAdditionGl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionGl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionGl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeAdditionGl));
  NodeAdditionGlAck_descriptor_ = file->message_type(23);
  static const int NodeAdditionGlAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionGlAck, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionGlAck, service_list_),
  };
  NodeAdditionGlAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeAdditionGlAck_descriptor_,
      NodeAdditionGlAck::default_instance_,
      NodeAdditionGlAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionGlAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionGlAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeAdditionGlAck));
  NodeStopLL_descriptor_ = file->message_type(24);
  static const int NodeStopLL_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopLL, node_),
  };
  NodeStopLL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeStopLL_descriptor_,
      NodeStopLL::default_instance_,
      NodeStopLL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopLL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopLL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeStopLL));
  NodeStopLLAck_descriptor_ = file->message_type(25);
  static const int NodeStopLLAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopLLAck, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopLLAck, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopLLAck, node_status_),
  };
  NodeStopLLAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeStopLLAck_descriptor_,
      NodeStopLLAck::default_instance_,
      NodeStopLLAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopLLAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopLLAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeStopLLAck));
  NodeRetire_descriptor_ = file->message_type(26);
  static const int NodeRetire_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRetire, node_),
  };
  NodeRetire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeRetire_descriptor_,
      NodeRetire::default_instance_,
      NodeRetire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRetire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRetire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeRetire));
  NodeRetireAck_descriptor_ = file->message_type(27);
  static const int NodeRetireAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRetireAck, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRetireAck, status_),
  };
  NodeRetireAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeRetireAck_descriptor_,
      NodeRetireAck::default_instance_,
      NodeRetireAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRetireAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRetireAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeRetireAck));
  NodeDeletionCli_descriptor_ = file->message_type(28);
  static const int NodeDeletionCli_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDeletionCli, node_),
  };
  NodeDeletionCli_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeDeletionCli_descriptor_,
      NodeDeletionCli::default_instance_,
      NodeDeletionCli_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDeletionCli, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDeletionCli, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeDeletionCli));
  NodeDeletionCliAck_descriptor_ = file->message_type(29);
  static const int NodeDeletionCliAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDeletionCliAck, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDeletionCliAck, status_),
  };
  NodeDeletionCliAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeDeletionCliAck_descriptor_,
      NodeDeletionCliAck::default_instance_,
      NodeDeletionCliAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDeletionCliAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDeletionCliAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeDeletionCliAck));
  NodeSystemStopCli_descriptor_ = file->message_type(30);
  static const int NodeSystemStopCli_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSystemStopCli, node_id_),
  };
  NodeSystemStopCli_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeSystemStopCli_descriptor_,
      NodeSystemStopCli::default_instance_,
      NodeSystemStopCli_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSystemStopCli, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSystemStopCli, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeSystemStopCli));
  LocalNodeStatus_descriptor_ = file->message_type(31);
  static const int LocalNodeStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalNodeStatus, node_id_),
  };
  LocalNodeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalNodeStatus_descriptor_,
      LocalNodeStatus::default_instance_,
      LocalNodeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalNodeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalNodeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalNodeStatus));
  NodeStatus_descriptor_ = file->message_type(32);
  static const int NodeStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, node_),
  };
  NodeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeStatus_descriptor_,
      NodeStatus::default_instance_,
      NodeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeStatus));
  NodeStatusAck_descriptor_ = file->message_type(33);
  static const int NodeStatusAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatusAck, status_),
  };
  NodeStatusAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeStatusAck_descriptor_,
      NodeStatusAck::default_instance_,
      NodeStatusAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatusAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatusAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeStatusAck));
  NodeStopCli_descriptor_ = file->message_type(34);
  static const int NodeStopCli_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopCli, node_id_),
  };
  NodeStopCli_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeStopCli_descriptor_,
      NodeStopCli::default_instance_,
      NodeStopCli_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopCli, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopCli, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeStopCli));
  NodeStopCliAck_descriptor_ = file->message_type(35);
  static const int NodeStopCliAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopCliAck, status_),
  };
  NodeStopCliAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeStopCliAck_descriptor_,
      NodeStopCliAck::default_instance_,
      NodeStopCliAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopCliAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStopCliAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeStopCliAck));
  StopServices_descriptor_ = file->message_type(36);
  static const int StopServices_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServices, service_id_),
  };
  StopServices_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopServices_descriptor_,
      StopServices::default_instance_,
      StopServices_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServices, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServices, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopServices));
  StopServicesAck_descriptor_ = file->message_type(37);
  static const int StopServicesAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServicesAck, status_),
  };
  StopServicesAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopServicesAck_descriptor_,
      StopServicesAck::default_instance_,
      StopServicesAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServicesAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServicesAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopServicesAck));
  NodeFailover_descriptor_ = file->message_type(38);
  static const int NodeFailover_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFailover, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFailover, status_),
  };
  NodeFailover_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeFailover_descriptor_,
      NodeFailover::default_instance_,
      NodeFailover_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFailover, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFailover, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeFailover));
  NodeFailoverAck_descriptor_ = file->message_type(39);
  static const int NodeFailoverAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFailoverAck, status_),
  };
  NodeFailoverAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeFailoverAck_descriptor_,
      NodeFailoverAck::default_instance_,
      NodeFailoverAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFailoverAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFailoverAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeFailoverAck));
  TakeGlOwnership_descriptor_ = file->message_type(40);
  static const int TakeGlOwnership_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGlOwnership, old_gl_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGlOwnership, new_gl_id_),
  };
  TakeGlOwnership_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeGlOwnership_descriptor_,
      TakeGlOwnership::default_instance_,
      TakeGlOwnership_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGlOwnership, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGlOwnership, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeGlOwnership));
  TakeGlOwnershipAck_descriptor_ = file->message_type(41);
  static const int TakeGlOwnershipAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGlOwnershipAck, new_gl_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGlOwnershipAck, status_),
  };
  TakeGlOwnershipAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeGlOwnershipAck_descriptor_,
      TakeGlOwnershipAck::default_instance_,
      TakeGlOwnershipAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGlOwnershipAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGlOwnershipAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeGlOwnershipAck));
  GetObjectVersion_descriptor_ = file->message_type(42);
  static const int GetObjectVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectVersion, service_id_),
  };
  GetObjectVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetObjectVersion_descriptor_,
      GetObjectVersion::default_instance_,
      GetObjectVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetObjectVersion));
  GetObjectVersionAck_descriptor_ = file->message_type(43);
  static const int GetObjectVersionAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectVersionAck, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectVersionAck, object_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectVersionAck, status_),
  };
  GetObjectVersionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetObjectVersionAck_descriptor_,
      GetObjectVersionAck::default_instance_,
      GetObjectVersionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectVersionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectVersionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetObjectVersionAck));
  NodeRejoinAfterRecovery_descriptor_ = file->message_type(44);
  static const int NodeRejoinAfterRecovery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRejoinAfterRecovery, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRejoinAfterRecovery, node_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRejoinAfterRecovery, node_port_),
  };
  NodeRejoinAfterRecovery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeRejoinAfterRecovery_descriptor_,
      NodeRejoinAfterRecovery::default_instance_,
      NodeRejoinAfterRecovery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRejoinAfterRecovery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRejoinAfterRecovery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeRejoinAfterRecovery));
  NodeRejoinAfterRecoveryAck_descriptor_ = file->message_type(45);
  static const int NodeRejoinAfterRecoveryAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRejoinAfterRecoveryAck, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRejoinAfterRecoveryAck, status_),
  };
  NodeRejoinAfterRecoveryAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeRejoinAfterRecoveryAck_descriptor_,
      NodeRejoinAfterRecoveryAck::default_instance_,
      NodeRejoinAfterRecoveryAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRejoinAfterRecoveryAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRejoinAfterRecoveryAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeRejoinAfterRecoveryAck));
  GetClusterStatus_descriptor_ = file->message_type(46);
  static const int GetClusterStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatus, service_id_),
  };
  GetClusterStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterStatus_descriptor_,
      GetClusterStatus::default_instance_,
      GetClusterStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterStatus));
  GetClusterStatusAck_descriptor_ = file->message_type(47);
  static const int GetClusterStatusAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusAck, node_status_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusAck, status_),
  };
  GetClusterStatusAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterStatusAck_descriptor_,
      GetClusterStatusAck::default_instance_,
      GetClusterStatusAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterStatusAck));
  GetClusterStatusAck_pair_descriptor_ = GetClusterStatusAck_descriptor_->nested_type(0);
  static const int GetClusterStatusAck_pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusAck_pair, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusAck_pair, status_enum_),
  };
  GetClusterStatusAck_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterStatusAck_pair_descriptor_,
      GetClusterStatusAck_pair::default_instance_,
      GetClusterStatusAck_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusAck_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusAck_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterStatusAck_pair));
  UpdateContainer_descriptor_ = file->message_type(48);
  static const int UpdateContainer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainer, meta_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainer, operation_),
  };
  UpdateContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateContainer_descriptor_,
      UpdateContainer::default_instance_,
      UpdateContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateContainer));
  ReleaseTransactionLock_descriptor_ = file->message_type(49);
  static const int ReleaseTransactionLock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseTransactionLock, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseTransactionLock, operation_),
  };
  ReleaseTransactionLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReleaseTransactionLock_descriptor_,
      ReleaseTransactionLock::default_instance_,
      ReleaseTransactionLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseTransactionLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseTransactionLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReleaseTransactionLock));
  StatusAck_descriptor_ = file->message_type(50);
  static const int StatusAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusAck, status_),
  };
  StatusAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusAck_descriptor_,
      StatusAck::default_instance_,
      StatusAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusAck));
  NodeAdditionFinalAck_descriptor_ = file->message_type(51);
  static const int NodeAdditionFinalAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionFinalAck, status_),
  };
  NodeAdditionFinalAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeAdditionFinalAck_descriptor_,
      NodeAdditionFinalAck::default_instance_,
      NodeAdditionFinalAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionFinalAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAdditionFinalAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeAdditionFinalAck));
  NodeStatusEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    service_obj_descriptor_, &service_obj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    errorStatus_descriptor_, &errorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    heartBeat_descriptor_, &heartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    heartBeatAck_descriptor_, &heartBeatAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopProxyAck_descriptor_, &StopProxyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockRequestAck_descriptor_, &BlockRequestAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferComponentsAck_descriptor_, &TransferComponentsAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferComponentsAck_pair_descriptor_, &TransferComponentsAck_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceComponentAck_descriptor_, &GetServiceComponentAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceComponent_descriptor_, &GetServiceComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGlobalMap_descriptor_, &GetGlobalMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalMapInfo_descriptor_, &GlobalMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalMapInfo_service_descriptor_, &GlobalMapInfo_service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalLeaderStartMonitoring_descriptor_, &LocalLeaderStartMonitoring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalLeaderStartMonitoringAck_descriptor_, &LocalLeaderStartMonitoringAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdStartMonitoring_descriptor_, &OsdStartMonitoring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdStartMonitoringAck_descriptor_, &OsdStartMonitoringAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvProcStartMonitoring_descriptor_, &RecvProcStartMonitoring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvProcStartMonitoringAck_descriptor_, &RecvProcStartMonitoringAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvProcStartMonitoringAck_entry_descriptor_, &RecvProcStartMonitoringAck_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompTransferInfo_descriptor_, &CompTransferInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompTransferInfo_pair_descriptor_, &CompTransferInfo_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompTranferFinalStat_descriptor_, &CompTranferFinalStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompTranferFinalStat_pair_descriptor_, &CompTranferFinalStat_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferComp_descriptor_, &TransferComp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferComp_pair_descriptor_, &TransferComp_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeAdditionCli_descriptor_, &NodeAdditionCli::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeAdditionCliAck_descriptor_, &NodeAdditionCliAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeAdditionCliAck_pair_descriptor_, &NodeAdditionCliAck_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeAdditionGl_descriptor_, &NodeAdditionGl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeAdditionGlAck_descriptor_, &NodeAdditionGlAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeStopLL_descriptor_, &NodeStopLL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeStopLLAck_descriptor_, &NodeStopLLAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeRetire_descriptor_, &NodeRetire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeRetireAck_descriptor_, &NodeRetireAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeDeletionCli_descriptor_, &NodeDeletionCli::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeDeletionCliAck_descriptor_, &NodeDeletionCliAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeSystemStopCli_descriptor_, &NodeSystemStopCli::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalNodeStatus_descriptor_, &LocalNodeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeStatus_descriptor_, &NodeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeStatusAck_descriptor_, &NodeStatusAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeStopCli_descriptor_, &NodeStopCli::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeStopCliAck_descriptor_, &NodeStopCliAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopServices_descriptor_, &StopServices::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopServicesAck_descriptor_, &StopServicesAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeFailover_descriptor_, &NodeFailover::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeFailoverAck_descriptor_, &NodeFailoverAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeGlOwnership_descriptor_, &TakeGlOwnership::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeGlOwnershipAck_descriptor_, &TakeGlOwnershipAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetObjectVersion_descriptor_, &GetObjectVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetObjectVersionAck_descriptor_, &GetObjectVersionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeRejoinAfterRecovery_descriptor_, &NodeRejoinAfterRecovery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeRejoinAfterRecoveryAck_descriptor_, &NodeRejoinAfterRecoveryAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterStatus_descriptor_, &GetClusterStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterStatusAck_descriptor_, &GetClusterStatusAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterStatusAck_pair_descriptor_, &GetClusterStatusAck_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateContainer_descriptor_, &UpdateContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReleaseTransactionLock_descriptor_, &ReleaseTransactionLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusAck_descriptor_, &StatusAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeAdditionFinalAck_descriptor_, &NodeAdditionFinalAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto() {
  delete service_obj::default_instance_;
  delete service_obj_reflection_;
  delete errorStatus::default_instance_;
  delete errorStatus_reflection_;
  delete heartBeat::default_instance_;
  delete heartBeat_reflection_;
  delete heartBeatAck::default_instance_;
  delete heartBeatAck_reflection_;
  delete StopProxyAck::default_instance_;
  delete StopProxyAck_reflection_;
  delete BlockRequestAck::default_instance_;
  delete BlockRequestAck_reflection_;
  delete TransferComponentsAck::default_instance_;
  delete TransferComponentsAck_reflection_;
  delete TransferComponentsAck_pair::default_instance_;
  delete TransferComponentsAck_pair_reflection_;
  delete GetServiceComponentAck::default_instance_;
  delete GetServiceComponentAck_reflection_;
  delete GetServiceComponent::default_instance_;
  delete GetServiceComponent_reflection_;
  delete GetGlobalMap::default_instance_;
  delete GetGlobalMap_reflection_;
  delete GlobalMapInfo::default_instance_;
  delete GlobalMapInfo_reflection_;
  delete GlobalMapInfo_service::default_instance_;
  delete GlobalMapInfo_service_reflection_;
  delete LocalLeaderStartMonitoring::default_instance_;
  delete LocalLeaderStartMonitoring_reflection_;
  delete LocalLeaderStartMonitoringAck::default_instance_;
  delete LocalLeaderStartMonitoringAck_reflection_;
  delete OsdStartMonitoring::default_instance_;
  delete OsdStartMonitoring_reflection_;
  delete OsdStartMonitoringAck::default_instance_;
  delete OsdStartMonitoringAck_reflection_;
  delete RecvProcStartMonitoring::default_instance_;
  delete RecvProcStartMonitoring_reflection_;
  delete RecvProcStartMonitoringAck::default_instance_;
  delete RecvProcStartMonitoringAck_reflection_;
  delete RecvProcStartMonitoringAck_entry::default_instance_;
  delete RecvProcStartMonitoringAck_entry_reflection_;
  delete CompTransferInfo::default_instance_;
  delete CompTransferInfo_reflection_;
  delete CompTransferInfo_pair::default_instance_;
  delete CompTransferInfo_pair_reflection_;
  delete CompTranferFinalStat::default_instance_;
  delete CompTranferFinalStat_reflection_;
  delete CompTranferFinalStat_pair::default_instance_;
  delete CompTranferFinalStat_pair_reflection_;
  delete TransferComp::default_instance_;
  delete TransferComp_reflection_;
  delete TransferComp_pair::default_instance_;
  delete TransferComp_pair_reflection_;
  delete NodeAdditionCli::default_instance_;
  delete NodeAdditionCli_reflection_;
  delete NodeAdditionCliAck::default_instance_;
  delete NodeAdditionCliAck_reflection_;
  delete NodeAdditionCliAck_pair::default_instance_;
  delete NodeAdditionCliAck_pair_reflection_;
  delete NodeAdditionGl::default_instance_;
  delete NodeAdditionGl_reflection_;
  delete NodeAdditionGlAck::default_instance_;
  delete NodeAdditionGlAck_reflection_;
  delete NodeStopLL::default_instance_;
  delete NodeStopLL_reflection_;
  delete NodeStopLLAck::default_instance_;
  delete NodeStopLLAck_reflection_;
  delete NodeRetire::default_instance_;
  delete NodeRetire_reflection_;
  delete NodeRetireAck::default_instance_;
  delete NodeRetireAck_reflection_;
  delete NodeDeletionCli::default_instance_;
  delete NodeDeletionCli_reflection_;
  delete NodeDeletionCliAck::default_instance_;
  delete NodeDeletionCliAck_reflection_;
  delete NodeSystemStopCli::default_instance_;
  delete NodeSystemStopCli_reflection_;
  delete LocalNodeStatus::default_instance_;
  delete LocalNodeStatus_reflection_;
  delete NodeStatus::default_instance_;
  delete NodeStatus_reflection_;
  delete NodeStatusAck::default_instance_;
  delete NodeStatusAck_reflection_;
  delete NodeStopCli::default_instance_;
  delete NodeStopCli_reflection_;
  delete NodeStopCliAck::default_instance_;
  delete NodeStopCliAck_reflection_;
  delete StopServices::default_instance_;
  delete StopServices_reflection_;
  delete StopServicesAck::default_instance_;
  delete StopServicesAck_reflection_;
  delete NodeFailover::default_instance_;
  delete NodeFailover_reflection_;
  delete NodeFailoverAck::default_instance_;
  delete NodeFailoverAck_reflection_;
  delete TakeGlOwnership::default_instance_;
  delete TakeGlOwnership_reflection_;
  delete TakeGlOwnershipAck::default_instance_;
  delete TakeGlOwnershipAck_reflection_;
  delete GetObjectVersion::default_instance_;
  delete GetObjectVersion_reflection_;
  delete GetObjectVersionAck::default_instance_;
  delete GetObjectVersionAck_reflection_;
  delete NodeRejoinAfterRecovery::default_instance_;
  delete NodeRejoinAfterRecovery_reflection_;
  delete NodeRejoinAfterRecoveryAck::default_instance_;
  delete NodeRejoinAfterRecoveryAck_reflection_;
  delete GetClusterStatus::default_instance_;
  delete GetClusterStatus_reflection_;
  delete GetClusterStatusAck::default_instance_;
  delete GetClusterStatusAck_reflection_;
  delete GetClusterStatusAck_pair::default_instance_;
  delete GetClusterStatusAck_pair_reflection_;
  delete UpdateContainer::default_instance_;
  delete UpdateContainer_reflection_;
  delete ReleaseTransactionLock::default_instance_;
  delete ReleaseTransactionLock_reflection_;
  delete StatusAck::default_instance_;
  delete StatusAck_reflection_;
  delete NodeAdditionFinalAck::default_instance_;
  delete NodeAdditionFinalAck_reflection_;
}

void protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n0src/communication_protocol/message_bin"
    "ding.proto\022\020network_messages\";\n\013service_"
    "obj\022\022\n\nservice_id\030\001 \001(\t\022\n\n\002ip\030\002 \002(\t\022\014\n\004p"
    "ort\030\003 \002(\005\"(\n\013errorStatus\022\014\n\004code\030\001 \002(\005\022\013"
    "\n\003msg\030\002 \002(\t\"P\n\theartBeat\022\013\n\003msg\030\001 \002(\t\022\022\n"
    "\nservice_id\030\002 \002(\t\022\020\n\010sequence\030\003 \002(\005\022\020\n\010h"
    "fs_stat\030\004 \001(\005\"@\n\014heartBeatAck\022\013\n\003msg\030\001 \002"
    "(\t\022\020\n\010sequence\030\002 \002(\005\022\021\n\tnode_stat\030\003 \001(\005\""
    ":\n\014StopProxyAck\022*\n\003err\030\001 \002(\0132\035.network_m"
    "essages.errorStatus\"!\n\017BlockRequestAck\022\016"
    "\n\006status\030\001 \002(\010\"\240\001\n\025TransferComponentsAck"
    "\022F\n\020comp_status_list\030\002 \003(\0132,.network_mes"
    "sages.TransferComponentsAck.pair\022\024\n\014fina"
    "l_status\030\003 \002(\010\032)\n\004pair\022\021\n\tcomponent\030\001 \002("
    "\005\022\016\n\006status\030\002 \002(\010\"\\\n\026GetServiceComponent"
    "Ack\022\026\n\016component_list\030\001 \003(\005\022*\n\003err\030\002 \002(\013"
    "2\035.network_messages.errorStatus\")\n\023GetSe"
    "rviceComponent\022\022\n\nservice_id\030\001 \002(\t\"\"\n\014Ge"
    "tGlobalMap\022\022\n\nservice_id\030\001 \002(\t\"\352\002\n\rGloba"
    "lMapInfo\022:\n\tcontainer\030\001 \002(\0132\'.network_me"
    "ssages.GlobalMapInfo.service\0228\n\007account\030"
    "\002 \002(\0132\'.network_messages.GlobalMapInfo.s"
    "ervice\0228\n\007updater\030\003 \002(\0132\'.network_messag"
    "es.GlobalMapInfo.service\0227\n\006object\030\004 \002(\013"
    "2\'.network_messages.GlobalMapInfo.servic"
    "e\022\017\n\007version\030\005 \002(\002\022\016\n\006status\030\006 \002(\010\032O\n\007se"
    "rvice\0223\n\014service_list\030\001 \003(\0132\035.network_me"
    "ssages.service_obj\022\017\n\007version\030\002 \001(\002\"0\n\032L"
    "ocalLeaderStartMonitoring\022\022\n\nservice_id\030"
    "\001 \002(\t\"C\n\035LocalLeaderStartMonitoringAck\022\022"
    "\n\nservice_id\030\001 \002(\t\022\016\n\006status\030\002 \002(\010\"B\n\022Os"
    "dStartMonitoring\022\022\n\nservice_id\030\001 \002(\t\022\014\n\004"
    "port\030\002 \002(\005\022\n\n\002ip\030\003 \002(\t\"Y\n\025OsdStartMonito"
    "ringAck\022\022\n\nservice_id\030\001 \002(\t\022,\n\005error\030\002 \002"
    "(\0132\035.network_messages.errorStatus\"*\n\027Rec"
    "vProcStartMonitoring\022\017\n\007proc_id\030\001 \002(\t\"\376\001"
    "\n\032RecvProcStartMonitoringAck\022H\n\014service_"
    "name\030\001 \003(\01322.network_messages.RecvProcSt"
    "artMonitoringAck.entry\0225\n\016source_service"
    "\030\002 \001(\0132\035.network_messages.service_obj\022\016\n"
    "\006status\030\003 \002(\010\032O\n\005entry\022.\n\007service\030\001 \002(\0132"
    "\035.network_messages.service_obj\022\026\n\016compon"
    "ent_list\030\002 \003(\005\"\277\001\n\020CompTransferInfo\022\022\n\ns"
    "ervice_id\030\001 \002(\t\022G\n\026component_service_pai"
    "r\030\002 \003(\0132\'.network_messages.CompTransferI"
    "nfo.pair\032N\n\004pair\022\021\n\tcomponent\030\001 \002(\005\0223\n\014d"
    "est_service\030\002 \002(\0132\035.network_messages.ser"
    "vice_obj\"\262\001\n\024CompTranferFinalStat\022\022\n\nser"
    "vice_id\030\001 \002(\t\022E\n\020comp_status_list\030\002 \003(\0132"
    "+.network_messages.CompTranferFinalStat."
    "pair\022\024\n\014final_status\030\003 \002(\010\032)\n\004pair\022\021\n\tco"
    "mponent\030\001 \002(\005\022\016\n\006status\030\002 \002(\010\"\236\001\n\014Transf"
    "erComp\022>\n\021service_comp_list\030\001 \003(\0132#.netw"
    "ork_messages.TransferComp.pair\032N\n\004pair\0223"
    "\n\014dest_service\030\001 \002(\0132\035.network_messages."
    "service_obj\022\021\n\tcomponent\030\002 \003(\005\"C\n\017NodeAd"
    "ditionCli\0220\n\tnode_list\030\001 \003(\0132\035.network_m"
    "essages.service_obj\"\272\001\n\022NodeAdditionCliA"
    "ck\022@\n\rnode_ack_list\030\001 \003(\0132).network_mess"
    "ages.NodeAdditionCliAck.pair\032b\n\004pair\022-\n\006"
    "status\030\001 \002(\0132\035.network_messages.errorSta"
    "tus\022+\n\004node\030\002 \002(\0132\035.network_messages.ser"
    "vice_obj\"$\n\016NodeAdditionGl\022\022\n\nservice_id"
    "\030\001 \002(\t\"w\n\021NodeAdditionGlAck\022-\n\006status\030\001 "
    "\002(\0132\035.network_messages.errorStatus\0223\n\014se"
    "rvice_list\030\002 \003(\0132\035.network_messages.serv"
    "ice_obj\"9\n\nNodeStopLL\022+\n\004node\030\001 \002(\0132\035.ne"
    "twork_messages.service_obj\"d\n\rNodeStopLL"
    "Ack\022\017\n\007node_id\030\001 \002(\t\022-\n\006status\030\002 \002(\0132\035.n"
    "etwork_messages.errorStatus\022\023\n\013node_stat"
    "us\030\003 \002(\005\"9\n\nNodeRetire\022+\n\004node\030\001 \002(\0132\035.n"
    "etwork_messages.service_obj\"O\n\rNodeRetir"
    "eAck\022\017\n\007node_id\030\001 \002(\t\022-\n\006status\030\002 \002(\0132\035."
    "network_messages.errorStatus\">\n\017NodeDele"
    "tionCli\022+\n\004node\030\001 \002(\0132\035.network_messages"
    ".service_obj\"T\n\022NodeDeletionCliAck\022\017\n\007no"
    "de_id\030\001 \002(\t\022-\n\006status\030\002 \002(\0132\035.network_me"
    "ssages.errorStatus\"$\n\021NodeSystemStopCli\022"
    "\017\n\007node_id\030\001 \002(\t\"\"\n\017LocalNodeStatus\022\017\n\007n"
    "ode_id\030\001 \002(\t\"9\n\nNodeStatus\022+\n\004node\030\001 \002(\013"
    "2\035.network_messages.service_obj\"O\n\rNodeS"
    "tatusAck\022>\n\006status\030\001 \002(\0162 .network_messa"
    "ges.NodeStatusEnum:\014INVALID_NODE\"\036\n\013Node"
    "StopCli\022\017\n\007node_id\030\001 \002(\t\"\?\n\016NodeStopCliA"
    "ck\022-\n\006status\030\001 \002(\0132\035.network_messages.er"
    "rorStatus\"\"\n\014StopServices\022\022\n\nservice_id\030"
    "\001 \002(\t\"@\n\017StopServicesAck\022-\n\006status\030\001 \002(\013"
    "2\035.network_messages.errorStatus\"N\n\014NodeF"
    "ailover\022\017\n\007node_id\030\001 \002(\t\022-\n\006status\030\002 \002(\013"
    "2\035.network_messages.errorStatus\"@\n\017NodeF"
    "ailoverAck\022-\n\006status\030\002 \002(\0132\035.network_mes"
    "sages.errorStatus\"7\n\017TakeGlOwnership\022\021\n\t"
    "old_gl_id\030\001 \002(\t\022\021\n\tnew_gl_id\030\002 \002(\t\"V\n\022Ta"
    "keGlOwnershipAck\022\021\n\tnew_gl_id\030\001 \002(\t\022-\n\006s"
    "tatus\030\002 \002(\0132\035.network_messages.errorStat"
    "us\"&\n\020GetObjectVersion\022\022\n\nservice_id\030\001 \002"
    "(\t\"Q\n\023GetObjectVersionAck\022\022\n\nservice_id\030"
    "\001 \002(\t\022\026\n\016object_version\030\002 \002(\004\022\016\n\006status\030"
    "\003 \002(\010\"N\n\027NodeRejoinAfterRecovery\022\017\n\007node"
    "_id\030\001 \002(\t\022\017\n\007node_ip\030\002 \002(\t\022\021\n\tnode_port\030"
    "\003 \002(\005\"\\\n\032NodeRejoinAfterRecoveryAck\022\017\n\007n"
    "ode_id\030\001 \002(\t\022-\n\006status\030\002 \002(\0132\035.network_m"
    "essages.errorStatus\"&\n\020GetClusterStatus\022"
    "\022\n\nservice_id\030\001 \002(\t\"\332\001\n\023GetClusterStatus"
    "Ack\022D\n\020node_status_list\030\001 \003(\0132*.network_"
    "messages.GetClusterStatusAck.pair\022-\n\006sta"
    "tus\030\002 \002(\0132\035.network_messages.errorStatus"
    "\032N\n\004pair\022\017\n\007node_id\030\001 \002(\t\0225\n\013status_enum"
    "\030\002 \002(\0162 .network_messages.NodeStatusEnum"
    "\"<\n\017UpdateContainer\022\026\n\016meta_file_path\030\001 "
    "\002(\t\022\021\n\toperation\030\002 \002(\t\"9\n\026ReleaseTransac"
    "tionLock\022\014\n\004lock\030\001 \002(\t\022\021\n\toperation\030\002 \002("
    "\t\"\033\n\tStatusAck\022\016\n\006status\030\001 \001(\010\"&\n\024NodeAd"
    "ditionFinalAck\022\016\n\006status\030\001 \002(\010*\250\002\n\016NodeS"
    "tatusEnum\022\013\n\007RUNNING\020\n\022\014\n\010STOPPING\020\024\022\010\n\004"
    "STOP\020\036\022\016\n\nREGISTERED\020(\022\n\n\006FAILED\0202\022\r\n\tRE"
    "COVERED\020<\022\014\n\010RETIRING\020F\022\013\n\007RETIRED\020P\022\021\n\r"
    "NODE_STOPPING\020Z\022\020\n\014INVALID_NODE\020d\022\007\n\003NEW"
    "\020n\022\023\n\017RETIRING_FAILED\020x\022\026\n\021RETIRED_RECOV"
    "ERED\020\202\001\022\026\n\021IN_LOCAL_NODE_REC\020\214\001\022\021\n\014NODE_"
    "STOPPED\020\226\001\022\025\n\020TRANSITION_STATE\020\240\001\022\016\n\tREJ"
    "OINING\020\252\001", 4849);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/communication_protocol/message_binding.proto", &protobuf_RegisterTypes);
  service_obj::default_instance_ = new service_obj();
  errorStatus::default_instance_ = new errorStatus();
  heartBeat::default_instance_ = new heartBeat();
  heartBeatAck::default_instance_ = new heartBeatAck();
  StopProxyAck::default_instance_ = new StopProxyAck();
  BlockRequestAck::default_instance_ = new BlockRequestAck();
  TransferComponentsAck::default_instance_ = new TransferComponentsAck();
  TransferComponentsAck_pair::default_instance_ = new TransferComponentsAck_pair();
  GetServiceComponentAck::default_instance_ = new GetServiceComponentAck();
  GetServiceComponent::default_instance_ = new GetServiceComponent();
  GetGlobalMap::default_instance_ = new GetGlobalMap();
  GlobalMapInfo::default_instance_ = new GlobalMapInfo();
  GlobalMapInfo_service::default_instance_ = new GlobalMapInfo_service();
  LocalLeaderStartMonitoring::default_instance_ = new LocalLeaderStartMonitoring();
  LocalLeaderStartMonitoringAck::default_instance_ = new LocalLeaderStartMonitoringAck();
  OsdStartMonitoring::default_instance_ = new OsdStartMonitoring();
  OsdStartMonitoringAck::default_instance_ = new OsdStartMonitoringAck();
  RecvProcStartMonitoring::default_instance_ = new RecvProcStartMonitoring();
  RecvProcStartMonitoringAck::default_instance_ = new RecvProcStartMonitoringAck();
  RecvProcStartMonitoringAck_entry::default_instance_ = new RecvProcStartMonitoringAck_entry();
  CompTransferInfo::default_instance_ = new CompTransferInfo();
  CompTransferInfo_pair::default_instance_ = new CompTransferInfo_pair();
  CompTranferFinalStat::default_instance_ = new CompTranferFinalStat();
  CompTranferFinalStat_pair::default_instance_ = new CompTranferFinalStat_pair();
  TransferComp::default_instance_ = new TransferComp();
  TransferComp_pair::default_instance_ = new TransferComp_pair();
  NodeAdditionCli::default_instance_ = new NodeAdditionCli();
  NodeAdditionCliAck::default_instance_ = new NodeAdditionCliAck();
  NodeAdditionCliAck_pair::default_instance_ = new NodeAdditionCliAck_pair();
  NodeAdditionGl::default_instance_ = new NodeAdditionGl();
  NodeAdditionGlAck::default_instance_ = new NodeAdditionGlAck();
  NodeStopLL::default_instance_ = new NodeStopLL();
  NodeStopLLAck::default_instance_ = new NodeStopLLAck();
  NodeRetire::default_instance_ = new NodeRetire();
  NodeRetireAck::default_instance_ = new NodeRetireAck();
  NodeDeletionCli::default_instance_ = new NodeDeletionCli();
  NodeDeletionCliAck::default_instance_ = new NodeDeletionCliAck();
  NodeSystemStopCli::default_instance_ = new NodeSystemStopCli();
  LocalNodeStatus::default_instance_ = new LocalNodeStatus();
  NodeStatus::default_instance_ = new NodeStatus();
  NodeStatusAck::default_instance_ = new NodeStatusAck();
  NodeStopCli::default_instance_ = new NodeStopCli();
  NodeStopCliAck::default_instance_ = new NodeStopCliAck();
  StopServices::default_instance_ = new StopServices();
  StopServicesAck::default_instance_ = new StopServicesAck();
  NodeFailover::default_instance_ = new NodeFailover();
  NodeFailoverAck::default_instance_ = new NodeFailoverAck();
  TakeGlOwnership::default_instance_ = new TakeGlOwnership();
  TakeGlOwnershipAck::default_instance_ = new TakeGlOwnershipAck();
  GetObjectVersion::default_instance_ = new GetObjectVersion();
  GetObjectVersionAck::default_instance_ = new GetObjectVersionAck();
  NodeRejoinAfterRecovery::default_instance_ = new NodeRejoinAfterRecovery();
  NodeRejoinAfterRecoveryAck::default_instance_ = new NodeRejoinAfterRecoveryAck();
  GetClusterStatus::default_instance_ = new GetClusterStatus();
  GetClusterStatusAck::default_instance_ = new GetClusterStatusAck();
  GetClusterStatusAck_pair::default_instance_ = new GetClusterStatusAck_pair();
  UpdateContainer::default_instance_ = new UpdateContainer();
  ReleaseTransactionLock::default_instance_ = new ReleaseTransactionLock();
  StatusAck::default_instance_ = new StatusAck();
  NodeAdditionFinalAck::default_instance_ = new NodeAdditionFinalAck();
  service_obj::default_instance_->InitAsDefaultInstance();
  errorStatus::default_instance_->InitAsDefaultInstance();
  heartBeat::default_instance_->InitAsDefaultInstance();
  heartBeatAck::default_instance_->InitAsDefaultInstance();
  StopProxyAck::default_instance_->InitAsDefaultInstance();
  BlockRequestAck::default_instance_->InitAsDefaultInstance();
  TransferComponentsAck::default_instance_->InitAsDefaultInstance();
  TransferComponentsAck_pair::default_instance_->InitAsDefaultInstance();
  GetServiceComponentAck::default_instance_->InitAsDefaultInstance();
  GetServiceComponent::default_instance_->InitAsDefaultInstance();
  GetGlobalMap::default_instance_->InitAsDefaultInstance();
  GlobalMapInfo::default_instance_->InitAsDefaultInstance();
  GlobalMapInfo_service::default_instance_->InitAsDefaultInstance();
  LocalLeaderStartMonitoring::default_instance_->InitAsDefaultInstance();
  LocalLeaderStartMonitoringAck::default_instance_->InitAsDefaultInstance();
  OsdStartMonitoring::default_instance_->InitAsDefaultInstance();
  OsdStartMonitoringAck::default_instance_->InitAsDefaultInstance();
  RecvProcStartMonitoring::default_instance_->InitAsDefaultInstance();
  RecvProcStartMonitoringAck::default_instance_->InitAsDefaultInstance();
  RecvProcStartMonitoringAck_entry::default_instance_->InitAsDefaultInstance();
  CompTransferInfo::default_instance_->InitAsDefaultInstance();
  CompTransferInfo_pair::default_instance_->InitAsDefaultInstance();
  CompTranferFinalStat::default_instance_->InitAsDefaultInstance();
  CompTranferFinalStat_pair::default_instance_->InitAsDefaultInstance();
  TransferComp::default_instance_->InitAsDefaultInstance();
  TransferComp_pair::default_instance_->InitAsDefaultInstance();
  NodeAdditionCli::default_instance_->InitAsDefaultInstance();
  NodeAdditionCliAck::default_instance_->InitAsDefaultInstance();
  NodeAdditionCliAck_pair::default_instance_->InitAsDefaultInstance();
  NodeAdditionGl::default_instance_->InitAsDefaultInstance();
  NodeAdditionGlAck::default_instance_->InitAsDefaultInstance();
  NodeStopLL::default_instance_->InitAsDefaultInstance();
  NodeStopLLAck::default_instance_->InitAsDefaultInstance();
  NodeRetire::default_instance_->InitAsDefaultInstance();
  NodeRetireAck::default_instance_->InitAsDefaultInstance();
  NodeDeletionCli::default_instance_->InitAsDefaultInstance();
  NodeDeletionCliAck::default_instance_->InitAsDefaultInstance();
  NodeSystemStopCli::default_instance_->InitAsDefaultInstance();
  LocalNodeStatus::default_instance_->InitAsDefaultInstance();
  NodeStatus::default_instance_->InitAsDefaultInstance();
  NodeStatusAck::default_instance_->InitAsDefaultInstance();
  NodeStopCli::default_instance_->InitAsDefaultInstance();
  NodeStopCliAck::default_instance_->InitAsDefaultInstance();
  StopServices::default_instance_->InitAsDefaultInstance();
  StopServicesAck::default_instance_->InitAsDefaultInstance();
  NodeFailover::default_instance_->InitAsDefaultInstance();
  NodeFailoverAck::default_instance_->InitAsDefaultInstance();
  TakeGlOwnership::default_instance_->InitAsDefaultInstance();
  TakeGlOwnershipAck::default_instance_->InitAsDefaultInstance();
  GetObjectVersion::default_instance_->InitAsDefaultInstance();
  GetObjectVersionAck::default_instance_->InitAsDefaultInstance();
  NodeRejoinAfterRecovery::default_instance_->InitAsDefaultInstance();
  NodeRejoinAfterRecoveryAck::default_instance_->InitAsDefaultInstance();
  GetClusterStatus::default_instance_->InitAsDefaultInstance();
  GetClusterStatusAck::default_instance_->InitAsDefaultInstance();
  GetClusterStatusAck_pair::default_instance_->InitAsDefaultInstance();
  UpdateContainer::default_instance_->InitAsDefaultInstance();
  ReleaseTransactionLock::default_instance_->InitAsDefaultInstance();
  StatusAck::default_instance_->InitAsDefaultInstance();
  NodeAdditionFinalAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto {
  StaticDescriptorInitializer_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto() {
    protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();
  }
} static_descriptor_initializer_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto_;

const ::google::protobuf::EnumDescriptor* NodeStatusEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStatusEnum_descriptor_;
}
bool NodeStatusEnum_IsValid(int value) {
  switch(value) {
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
    case 60:
    case 70:
    case 80:
    case 90:
    case 100:
    case 110:
    case 120:
    case 130:
    case 140:
    case 150:
    case 160:
    case 170:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int service_obj::kServiceIdFieldNumber;
const int service_obj::kIpFieldNumber;
const int service_obj::kPortFieldNumber;
#endif  // !_MSC_VER

service_obj::service_obj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void service_obj::InitAsDefaultInstance() {
}

service_obj::service_obj(const service_obj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void service_obj::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

service_obj::~service_obj() {
  SharedDtor();
}

void service_obj::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void service_obj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* service_obj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return service_obj_descriptor_;
}

const service_obj& service_obj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

service_obj* service_obj::default_instance_ = NULL;

service_obj* service_obj::New() const {
  return new service_obj;
}

void service_obj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool service_obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void service_obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* service_obj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int service_obj::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void service_obj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const service_obj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const service_obj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void service_obj::MergeFrom(const service_obj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void service_obj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void service_obj::CopyFrom(const service_obj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool service_obj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void service_obj::Swap(service_obj* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata service_obj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = service_obj_descriptor_;
  metadata.reflection = service_obj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int errorStatus::kCodeFieldNumber;
const int errorStatus::kMsgFieldNumber;
#endif  // !_MSC_VER

errorStatus::errorStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void errorStatus::InitAsDefaultInstance() {
}

errorStatus::errorStatus(const errorStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void errorStatus::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

errorStatus::~errorStatus() {
  SharedDtor();
}

void errorStatus::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void errorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* errorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return errorStatus_descriptor_;
}

const errorStatus& errorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

errorStatus* errorStatus::default_instance_ = NULL;

errorStatus* errorStatus::New() const {
  return new errorStatus;
}

void errorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool errorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void errorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* errorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int errorStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void errorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const errorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const errorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void errorStatus::MergeFrom(const errorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void errorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void errorStatus::CopyFrom(const errorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool errorStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void errorStatus::Swap(errorStatus* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata errorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = errorStatus_descriptor_;
  metadata.reflection = errorStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int heartBeat::kMsgFieldNumber;
const int heartBeat::kServiceIdFieldNumber;
const int heartBeat::kSequenceFieldNumber;
const int heartBeat::kHfsStatFieldNumber;
#endif  // !_MSC_VER

heartBeat::heartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void heartBeat::InitAsDefaultInstance() {
}

heartBeat::heartBeat(const heartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void heartBeat::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_ = 0;
  hfs_stat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

heartBeat::~heartBeat() {
  SharedDtor();
}

void heartBeat::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void heartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* heartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return heartBeat_descriptor_;
}

const heartBeat& heartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

heartBeat* heartBeat::default_instance_ = NULL;

heartBeat* heartBeat::New() const {
  return new heartBeat;
}

void heartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    sequence_ = 0;
    hfs_stat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool heartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_id;
        break;
      }
      
      // required string service_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sequence;
        break;
      }
      
      // required int32 sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hfs_stat;
        break;
      }
      
      // optional int32 hfs_stat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hfs_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hfs_stat_)));
          set_has_hfs_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void heartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }
  
  // required string service_id = 2;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service_id(), output);
  }
  
  // required int32 sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sequence(), output);
  }
  
  // optional int32 hfs_stat = 4;
  if (has_hfs_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hfs_stat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* heartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }
  
  // required string service_id = 2;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_id(), target);
  }
  
  // required int32 sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sequence(), target);
  }
  
  // optional int32 hfs_stat = 4;
  if (has_hfs_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hfs_stat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int heartBeat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // required string service_id = 2;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
    // required int32 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }
    
    // optional int32 hfs_stat = 4;
    if (has_hfs_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hfs_stat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void heartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const heartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const heartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void heartBeat::MergeFrom(const heartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_hfs_stat()) {
      set_hfs_stat(from.hfs_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void heartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartBeat::CopyFrom(const heartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void heartBeat::Swap(heartBeat* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(service_id_, other->service_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(hfs_stat_, other->hfs_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata heartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = heartBeat_descriptor_;
  metadata.reflection = heartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int heartBeatAck::kMsgFieldNumber;
const int heartBeatAck::kSequenceFieldNumber;
const int heartBeatAck::kNodeStatFieldNumber;
#endif  // !_MSC_VER

heartBeatAck::heartBeatAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void heartBeatAck::InitAsDefaultInstance() {
}

heartBeatAck::heartBeatAck(const heartBeatAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void heartBeatAck::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_ = 0;
  node_stat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

heartBeatAck::~heartBeatAck() {
  SharedDtor();
}

void heartBeatAck::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void heartBeatAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* heartBeatAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return heartBeatAck_descriptor_;
}

const heartBeatAck& heartBeatAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

heartBeatAck* heartBeatAck::default_instance_ = NULL;

heartBeatAck* heartBeatAck::New() const {
  return new heartBeatAck;
}

void heartBeatAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    sequence_ = 0;
    node_stat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool heartBeatAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }
      
      // required int32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_node_stat;
        break;
      }
      
      // optional int32 node_stat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_stat_)));
          set_has_node_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void heartBeatAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }
  
  // required int32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence(), output);
  }
  
  // optional int32 node_stat = 3;
  if (has_node_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->node_stat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* heartBeatAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }
  
  // required int32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequence(), target);
  }
  
  // optional int32 node_stat = 3;
  if (has_node_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->node_stat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int heartBeatAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // required int32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }
    
    // optional int32 node_stat = 3;
    if (has_node_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_stat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void heartBeatAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const heartBeatAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const heartBeatAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void heartBeatAck::MergeFrom(const heartBeatAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_node_stat()) {
      set_node_stat(from.node_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void heartBeatAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartBeatAck::CopyFrom(const heartBeatAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartBeatAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void heartBeatAck::Swap(heartBeatAck* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(sequence_, other->sequence_);
    std::swap(node_stat_, other->node_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata heartBeatAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = heartBeatAck_descriptor_;
  metadata.reflection = heartBeatAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopProxyAck::kErrFieldNumber;
#endif  // !_MSC_VER

StopProxyAck::StopProxyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopProxyAck::InitAsDefaultInstance() {
  err_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

StopProxyAck::StopProxyAck(const StopProxyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopProxyAck::SharedCtor() {
  _cached_size_ = 0;
  err_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopProxyAck::~StopProxyAck() {
  SharedDtor();
}

void StopProxyAck::SharedDtor() {
  if (this != default_instance_) {
    delete err_;
  }
}

void StopProxyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopProxyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopProxyAck_descriptor_;
}

const StopProxyAck& StopProxyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

StopProxyAck* StopProxyAck::default_instance_ = NULL;

StopProxyAck* StopProxyAck::New() const {
  return new StopProxyAck;
}

void StopProxyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_err()) {
      if (err_ != NULL) err_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopProxyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.errorStatus err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopProxyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.errorStatus err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopProxyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.errorStatus err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopProxyAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.errorStatus err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopProxyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopProxyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopProxyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopProxyAck::MergeFrom(const StopProxyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      mutable_err()->::network_messages::errorStatus::MergeFrom(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopProxyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopProxyAck::CopyFrom(const StopProxyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopProxyAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_err()) {
    if (!this->err().IsInitialized()) return false;
  }
  return true;
}

void StopProxyAck::Swap(StopProxyAck* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopProxyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopProxyAck_descriptor_;
  metadata.reflection = StopProxyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockRequestAck::kStatusFieldNumber;
#endif  // !_MSC_VER

BlockRequestAck::BlockRequestAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockRequestAck::InitAsDefaultInstance() {
}

BlockRequestAck::BlockRequestAck(const BlockRequestAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockRequestAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockRequestAck::~BlockRequestAck() {
  SharedDtor();
}

void BlockRequestAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockRequestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockRequestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockRequestAck_descriptor_;
}

const BlockRequestAck& BlockRequestAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

BlockRequestAck* BlockRequestAck::default_instance_ = NULL;

BlockRequestAck* BlockRequestAck::New() const {
  return new BlockRequestAck;
}

void BlockRequestAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockRequestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockRequestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockRequestAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockRequestAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockRequestAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockRequestAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockRequestAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockRequestAck::MergeFrom(const BlockRequestAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockRequestAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockRequestAck::CopyFrom(const BlockRequestAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequestAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BlockRequestAck::Swap(BlockRequestAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockRequestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockRequestAck_descriptor_;
  metadata.reflection = BlockRequestAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferComponentsAck_pair::kComponentFieldNumber;
const int TransferComponentsAck_pair::kStatusFieldNumber;
#endif  // !_MSC_VER

TransferComponentsAck_pair::TransferComponentsAck_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferComponentsAck_pair::InitAsDefaultInstance() {
}

TransferComponentsAck_pair::TransferComponentsAck_pair(const TransferComponentsAck_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferComponentsAck_pair::SharedCtor() {
  _cached_size_ = 0;
  component_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferComponentsAck_pair::~TransferComponentsAck_pair() {
  SharedDtor();
}

void TransferComponentsAck_pair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferComponentsAck_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferComponentsAck_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferComponentsAck_pair_descriptor_;
}

const TransferComponentsAck_pair& TransferComponentsAck_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

TransferComponentsAck_pair* TransferComponentsAck_pair::default_instance_ = NULL;

TransferComponentsAck_pair* TransferComponentsAck_pair::New() const {
  return new TransferComponentsAck_pair;
}

void TransferComponentsAck_pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    component_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferComponentsAck_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 component = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &component_)));
          set_has_component();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferComponentsAck_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 component = 1;
  if (has_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->component(), output);
  }
  
  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferComponentsAck_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 component = 1;
  if (has_component()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->component(), target);
  }
  
  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferComponentsAck_pair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 component = 1;
    if (has_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->component());
    }
    
    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferComponentsAck_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferComponentsAck_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferComponentsAck_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferComponentsAck_pair::MergeFrom(const TransferComponentsAck_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_component()) {
      set_component(from.component());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferComponentsAck_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferComponentsAck_pair::CopyFrom(const TransferComponentsAck_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferComponentsAck_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TransferComponentsAck_pair::Swap(TransferComponentsAck_pair* other) {
  if (other != this) {
    std::swap(component_, other->component_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferComponentsAck_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferComponentsAck_pair_descriptor_;
  metadata.reflection = TransferComponentsAck_pair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TransferComponentsAck::kCompStatusListFieldNumber;
const int TransferComponentsAck::kFinalStatusFieldNumber;
#endif  // !_MSC_VER

TransferComponentsAck::TransferComponentsAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferComponentsAck::InitAsDefaultInstance() {
}

TransferComponentsAck::TransferComponentsAck(const TransferComponentsAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferComponentsAck::SharedCtor() {
  _cached_size_ = 0;
  final_status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferComponentsAck::~TransferComponentsAck() {
  SharedDtor();
}

void TransferComponentsAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferComponentsAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferComponentsAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferComponentsAck_descriptor_;
}

const TransferComponentsAck& TransferComponentsAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

TransferComponentsAck* TransferComponentsAck::default_instance_ = NULL;

TransferComponentsAck* TransferComponentsAck::New() const {
  return new TransferComponentsAck;
}

void TransferComponentsAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    final_status_ = false;
  }
  comp_status_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferComponentsAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network_messages.TransferComponentsAck.pair comp_status_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comp_status_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comp_status_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comp_status_list;
        if (input->ExpectTag(24)) goto parse_final_status;
        break;
      }
      
      // required bool final_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &final_status_)));
          set_has_final_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferComponentsAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .network_messages.TransferComponentsAck.pair comp_status_list = 2;
  for (int i = 0; i < this->comp_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->comp_status_list(i), output);
  }
  
  // required bool final_status = 3;
  if (has_final_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->final_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferComponentsAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .network_messages.TransferComponentsAck.pair comp_status_list = 2;
  for (int i = 0; i < this->comp_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->comp_status_list(i), target);
  }
  
  // required bool final_status = 3;
  if (has_final_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->final_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferComponentsAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool final_status = 3;
    if (has_final_status()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .network_messages.TransferComponentsAck.pair comp_status_list = 2;
  total_size += 1 * this->comp_status_list_size();
  for (int i = 0; i < this->comp_status_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comp_status_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferComponentsAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferComponentsAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferComponentsAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferComponentsAck::MergeFrom(const TransferComponentsAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  comp_status_list_.MergeFrom(from.comp_status_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_final_status()) {
      set_final_status(from.final_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferComponentsAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferComponentsAck::CopyFrom(const TransferComponentsAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferComponentsAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < comp_status_list_size(); i++) {
    if (!this->comp_status_list(i).IsInitialized()) return false;
  }
  return true;
}

void TransferComponentsAck::Swap(TransferComponentsAck* other) {
  if (other != this) {
    comp_status_list_.Swap(&other->comp_status_list_);
    std::swap(final_status_, other->final_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferComponentsAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferComponentsAck_descriptor_;
  metadata.reflection = TransferComponentsAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceComponentAck::kComponentListFieldNumber;
const int GetServiceComponentAck::kErrFieldNumber;
#endif  // !_MSC_VER

GetServiceComponentAck::GetServiceComponentAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServiceComponentAck::InitAsDefaultInstance() {
  err_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

GetServiceComponentAck::GetServiceComponentAck(const GetServiceComponentAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceComponentAck::SharedCtor() {
  _cached_size_ = 0;
  err_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceComponentAck::~GetServiceComponentAck() {
  SharedDtor();
}

void GetServiceComponentAck::SharedDtor() {
  if (this != default_instance_) {
    delete err_;
  }
}

void GetServiceComponentAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceComponentAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceComponentAck_descriptor_;
}

const GetServiceComponentAck& GetServiceComponentAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GetServiceComponentAck* GetServiceComponentAck::default_instance_ = NULL;

GetServiceComponentAck* GetServiceComponentAck::New() const {
  return new GetServiceComponentAck;
}

void GetServiceComponentAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_err()) {
      if (err_ != NULL) err_->::network_messages::errorStatus::Clear();
    }
  }
  component_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceComponentAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 component_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_component_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_component_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_component_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_component_list;
        if (input->ExpectTag(18)) goto parse_err;
        break;
      }
      
      // required .network_messages.errorStatus err = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServiceComponentAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 component_list = 1;
  for (int i = 0; i < this->component_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->component_list(i), output);
  }
  
  // required .network_messages.errorStatus err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServiceComponentAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 component_list = 1;
  for (int i = 0; i < this->component_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->component_list(i), target);
  }
  
  // required .network_messages.errorStatus err = 2;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServiceComponentAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .network_messages.errorStatus err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->err());
    }
    
  }
  // repeated int32 component_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->component_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->component_list(i));
    }
    total_size += 1 * this->component_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceComponentAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceComponentAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceComponentAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceComponentAck::MergeFrom(const GetServiceComponentAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_list_.MergeFrom(from.component_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_err()) {
      mutable_err()->::network_messages::errorStatus::MergeFrom(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceComponentAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceComponentAck::CopyFrom(const GetServiceComponentAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceComponentAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_err()) {
    if (!this->err().IsInitialized()) return false;
  }
  return true;
}

void GetServiceComponentAck::Swap(GetServiceComponentAck* other) {
  if (other != this) {
    component_list_.Swap(&other->component_list_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceComponentAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceComponentAck_descriptor_;
  metadata.reflection = GetServiceComponentAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceComponent::kServiceIdFieldNumber;
#endif  // !_MSC_VER

GetServiceComponent::GetServiceComponent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServiceComponent::InitAsDefaultInstance() {
}

GetServiceComponent::GetServiceComponent(const GetServiceComponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServiceComponent::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceComponent::~GetServiceComponent() {
  SharedDtor();
}

void GetServiceComponent::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void GetServiceComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceComponent_descriptor_;
}

const GetServiceComponent& GetServiceComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GetServiceComponent* GetServiceComponent::default_instance_ = NULL;

GetServiceComponent* GetServiceComponent::New() const {
  return new GetServiceComponent;
}

void GetServiceComponent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServiceComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServiceComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServiceComponent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceComponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceComponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceComponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceComponent::MergeFrom(const GetServiceComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceComponent::CopyFrom(const GetServiceComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceComponent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetServiceComponent::Swap(GetServiceComponent* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceComponent_descriptor_;
  metadata.reflection = GetServiceComponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGlobalMap::kServiceIdFieldNumber;
#endif  // !_MSC_VER

GetGlobalMap::GetGlobalMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGlobalMap::InitAsDefaultInstance() {
}

GetGlobalMap::GetGlobalMap(const GetGlobalMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGlobalMap::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGlobalMap::~GetGlobalMap() {
  SharedDtor();
}

void GetGlobalMap::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void GetGlobalMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGlobalMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGlobalMap_descriptor_;
}

const GetGlobalMap& GetGlobalMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GetGlobalMap* GetGlobalMap::default_instance_ = NULL;

GetGlobalMap* GetGlobalMap::New() const {
  return new GetGlobalMap;
}

void GetGlobalMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGlobalMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGlobalMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGlobalMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGlobalMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGlobalMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGlobalMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGlobalMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGlobalMap::MergeFrom(const GetGlobalMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGlobalMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGlobalMap::CopyFrom(const GetGlobalMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGlobalMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetGlobalMap::Swap(GetGlobalMap* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGlobalMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGlobalMap_descriptor_;
  metadata.reflection = GetGlobalMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalMapInfo_service::kServiceListFieldNumber;
const int GlobalMapInfo_service::kVersionFieldNumber;
#endif  // !_MSC_VER

GlobalMapInfo_service::GlobalMapInfo_service()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalMapInfo_service::InitAsDefaultInstance() {
}

GlobalMapInfo_service::GlobalMapInfo_service(const GlobalMapInfo_service& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalMapInfo_service::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalMapInfo_service::~GlobalMapInfo_service() {
  SharedDtor();
}

void GlobalMapInfo_service::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalMapInfo_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalMapInfo_service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalMapInfo_service_descriptor_;
}

const GlobalMapInfo_service& GlobalMapInfo_service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GlobalMapInfo_service* GlobalMapInfo_service::default_instance_ = NULL;

GlobalMapInfo_service* GlobalMapInfo_service::New() const {
  return new GlobalMapInfo_service;
}

void GlobalMapInfo_service::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    version_ = 0;
  }
  service_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalMapInfo_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network_messages.service_obj service_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_service_list;
        if (input->ExpectTag(21)) goto parse_version;
        break;
      }
      
      // optional float version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalMapInfo_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .network_messages.service_obj service_list = 1;
  for (int i = 0; i < this->service_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->service_list(i), output);
  }
  
  // optional float version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalMapInfo_service::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .network_messages.service_obj service_list = 1;
  for (int i = 0; i < this->service_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->service_list(i), target);
  }
  
  // optional float version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalMapInfo_service::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float version = 2;
    if (has_version()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .network_messages.service_obj service_list = 1;
  total_size += 1 * this->service_list_size();
  for (int i = 0; i < this->service_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalMapInfo_service::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalMapInfo_service* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalMapInfo_service*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalMapInfo_service::MergeFrom(const GlobalMapInfo_service& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_list_.MergeFrom(from.service_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalMapInfo_service::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalMapInfo_service::CopyFrom(const GlobalMapInfo_service& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalMapInfo_service::IsInitialized() const {
  
  for (int i = 0; i < service_list_size(); i++) {
    if (!this->service_list(i).IsInitialized()) return false;
  }
  return true;
}

void GlobalMapInfo_service::Swap(GlobalMapInfo_service* other) {
  if (other != this) {
    service_list_.Swap(&other->service_list_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalMapInfo_service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalMapInfo_service_descriptor_;
  metadata.reflection = GlobalMapInfo_service_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GlobalMapInfo::kContainerFieldNumber;
const int GlobalMapInfo::kAccountFieldNumber;
const int GlobalMapInfo::kUpdaterFieldNumber;
const int GlobalMapInfo::kObjectFieldNumber;
const int GlobalMapInfo::kVersionFieldNumber;
const int GlobalMapInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

GlobalMapInfo::GlobalMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalMapInfo::InitAsDefaultInstance() {
  container_ = const_cast< ::network_messages::GlobalMapInfo_service*>(&::network_messages::GlobalMapInfo_service::default_instance());
  account_ = const_cast< ::network_messages::GlobalMapInfo_service*>(&::network_messages::GlobalMapInfo_service::default_instance());
  updater_ = const_cast< ::network_messages::GlobalMapInfo_service*>(&::network_messages::GlobalMapInfo_service::default_instance());
  object_ = const_cast< ::network_messages::GlobalMapInfo_service*>(&::network_messages::GlobalMapInfo_service::default_instance());
}

GlobalMapInfo::GlobalMapInfo(const GlobalMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalMapInfo::SharedCtor() {
  _cached_size_ = 0;
  container_ = NULL;
  account_ = NULL;
  updater_ = NULL;
  object_ = NULL;
  version_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalMapInfo::~GlobalMapInfo() {
  SharedDtor();
}

void GlobalMapInfo::SharedDtor() {
  if (this != default_instance_) {
    delete container_;
    delete account_;
    delete updater_;
    delete object_;
  }
}

void GlobalMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalMapInfo_descriptor_;
}

const GlobalMapInfo& GlobalMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GlobalMapInfo* GlobalMapInfo::default_instance_ = NULL;

GlobalMapInfo* GlobalMapInfo::New() const {
  return new GlobalMapInfo;
}

void GlobalMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container()) {
      if (container_ != NULL) container_->::network_messages::GlobalMapInfo_service::Clear();
    }
    if (has_account()) {
      if (account_ != NULL) account_->::network_messages::GlobalMapInfo_service::Clear();
    }
    if (has_updater()) {
      if (updater_ != NULL) updater_->::network_messages::GlobalMapInfo_service::Clear();
    }
    if (has_object()) {
      if (object_ != NULL) object_->::network_messages::GlobalMapInfo_service::Clear();
    }
    version_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.GlobalMapInfo.service container = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }
      
      // required .network_messages.GlobalMapInfo.service account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_updater;
        break;
      }
      
      // required .network_messages.GlobalMapInfo.service updater = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updater()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_object;
        break;
      }
      
      // required .network_messages.GlobalMapInfo.service object = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_version;
        break;
      }
      
      // required float version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }
      
      // required bool status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.GlobalMapInfo.service container = 1;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container(), output);
  }
  
  // required .network_messages.GlobalMapInfo.service account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account(), output);
  }
  
  // required .network_messages.GlobalMapInfo.service updater = 3;
  if (has_updater()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updater(), output);
  }
  
  // required .network_messages.GlobalMapInfo.service object = 4;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->object(), output);
  }
  
  // required float version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->version(), output);
  }
  
  // required bool status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.GlobalMapInfo.service container = 1;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container(), target);
  }
  
  // required .network_messages.GlobalMapInfo.service account = 2;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account(), target);
  }
  
  // required .network_messages.GlobalMapInfo.service updater = 3;
  if (has_updater()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updater(), target);
  }
  
  // required .network_messages.GlobalMapInfo.service object = 4;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->object(), target);
  }
  
  // required float version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->version(), target);
  }
  
  // required bool status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalMapInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.GlobalMapInfo.service container = 1;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }
    
    // required .network_messages.GlobalMapInfo.service account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }
    
    // required .network_messages.GlobalMapInfo.service updater = 3;
    if (has_updater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updater());
    }
    
    // required .network_messages.GlobalMapInfo.service object = 4;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }
    
    // required float version = 5;
    if (has_version()) {
      total_size += 1 + 4;
    }
    
    // required bool status = 6;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalMapInfo::MergeFrom(const GlobalMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container()) {
      mutable_container()->::network_messages::GlobalMapInfo_service::MergeFrom(from.container());
    }
    if (from.has_account()) {
      mutable_account()->::network_messages::GlobalMapInfo_service::MergeFrom(from.account());
    }
    if (from.has_updater()) {
      mutable_updater()->::network_messages::GlobalMapInfo_service::MergeFrom(from.updater());
    }
    if (from.has_object()) {
      mutable_object()->::network_messages::GlobalMapInfo_service::MergeFrom(from.object());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalMapInfo::CopyFrom(const GlobalMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  if (has_updater()) {
    if (!this->updater().IsInitialized()) return false;
  }
  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void GlobalMapInfo::Swap(GlobalMapInfo* other) {
  if (other != this) {
    std::swap(container_, other->container_);
    std::swap(account_, other->account_);
    std::swap(updater_, other->updater_);
    std::swap(object_, other->object_);
    std::swap(version_, other->version_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalMapInfo_descriptor_;
  metadata.reflection = GlobalMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalLeaderStartMonitoring::kServiceIdFieldNumber;
#endif  // !_MSC_VER

LocalLeaderStartMonitoring::LocalLeaderStartMonitoring()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalLeaderStartMonitoring::InitAsDefaultInstance() {
}

LocalLeaderStartMonitoring::LocalLeaderStartMonitoring(const LocalLeaderStartMonitoring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalLeaderStartMonitoring::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalLeaderStartMonitoring::~LocalLeaderStartMonitoring() {
  SharedDtor();
}

void LocalLeaderStartMonitoring::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void LocalLeaderStartMonitoring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalLeaderStartMonitoring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalLeaderStartMonitoring_descriptor_;
}

const LocalLeaderStartMonitoring& LocalLeaderStartMonitoring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

LocalLeaderStartMonitoring* LocalLeaderStartMonitoring::default_instance_ = NULL;

LocalLeaderStartMonitoring* LocalLeaderStartMonitoring::New() const {
  return new LocalLeaderStartMonitoring;
}

void LocalLeaderStartMonitoring::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalLeaderStartMonitoring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalLeaderStartMonitoring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalLeaderStartMonitoring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalLeaderStartMonitoring::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalLeaderStartMonitoring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalLeaderStartMonitoring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalLeaderStartMonitoring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalLeaderStartMonitoring::MergeFrom(const LocalLeaderStartMonitoring& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalLeaderStartMonitoring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalLeaderStartMonitoring::CopyFrom(const LocalLeaderStartMonitoring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalLeaderStartMonitoring::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LocalLeaderStartMonitoring::Swap(LocalLeaderStartMonitoring* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalLeaderStartMonitoring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalLeaderStartMonitoring_descriptor_;
  metadata.reflection = LocalLeaderStartMonitoring_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalLeaderStartMonitoringAck::kServiceIdFieldNumber;
const int LocalLeaderStartMonitoringAck::kStatusFieldNumber;
#endif  // !_MSC_VER

LocalLeaderStartMonitoringAck::LocalLeaderStartMonitoringAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalLeaderStartMonitoringAck::InitAsDefaultInstance() {
}

LocalLeaderStartMonitoringAck::LocalLeaderStartMonitoringAck(const LocalLeaderStartMonitoringAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalLeaderStartMonitoringAck::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalLeaderStartMonitoringAck::~LocalLeaderStartMonitoringAck() {
  SharedDtor();
}

void LocalLeaderStartMonitoringAck::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void LocalLeaderStartMonitoringAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalLeaderStartMonitoringAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalLeaderStartMonitoringAck_descriptor_;
}

const LocalLeaderStartMonitoringAck& LocalLeaderStartMonitoringAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

LocalLeaderStartMonitoringAck* LocalLeaderStartMonitoringAck::default_instance_ = NULL;

LocalLeaderStartMonitoringAck* LocalLeaderStartMonitoringAck::New() const {
  return new LocalLeaderStartMonitoringAck;
}

void LocalLeaderStartMonitoringAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalLeaderStartMonitoringAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalLeaderStartMonitoringAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalLeaderStartMonitoringAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalLeaderStartMonitoringAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalLeaderStartMonitoringAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalLeaderStartMonitoringAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalLeaderStartMonitoringAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalLeaderStartMonitoringAck::MergeFrom(const LocalLeaderStartMonitoringAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalLeaderStartMonitoringAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalLeaderStartMonitoringAck::CopyFrom(const LocalLeaderStartMonitoringAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalLeaderStartMonitoringAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LocalLeaderStartMonitoringAck::Swap(LocalLeaderStartMonitoringAck* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalLeaderStartMonitoringAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalLeaderStartMonitoringAck_descriptor_;
  metadata.reflection = LocalLeaderStartMonitoringAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsdStartMonitoring::kServiceIdFieldNumber;
const int OsdStartMonitoring::kPortFieldNumber;
const int OsdStartMonitoring::kIpFieldNumber;
#endif  // !_MSC_VER

OsdStartMonitoring::OsdStartMonitoring()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdStartMonitoring::InitAsDefaultInstance() {
}

OsdStartMonitoring::OsdStartMonitoring(const OsdStartMonitoring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdStartMonitoring::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdStartMonitoring::~OsdStartMonitoring() {
  SharedDtor();
}

void OsdStartMonitoring::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void OsdStartMonitoring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdStartMonitoring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdStartMonitoring_descriptor_;
}

const OsdStartMonitoring& OsdStartMonitoring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

OsdStartMonitoring* OsdStartMonitoring::default_instance_ = NULL;

OsdStartMonitoring* OsdStartMonitoring::New() const {
  return new OsdStartMonitoring;
}

void OsdStartMonitoring::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    port_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdStartMonitoring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }
      
      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsdStartMonitoring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdStartMonitoring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdStartMonitoring::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdStartMonitoring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdStartMonitoring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdStartMonitoring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdStartMonitoring::MergeFrom(const OsdStartMonitoring& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdStartMonitoring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStartMonitoring::CopyFrom(const OsdStartMonitoring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStartMonitoring::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void OsdStartMonitoring::Swap(OsdStartMonitoring* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdStartMonitoring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdStartMonitoring_descriptor_;
  metadata.reflection = OsdStartMonitoring_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsdStartMonitoringAck::kServiceIdFieldNumber;
const int OsdStartMonitoringAck::kErrorFieldNumber;
#endif  // !_MSC_VER

OsdStartMonitoringAck::OsdStartMonitoringAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdStartMonitoringAck::InitAsDefaultInstance() {
  error_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

OsdStartMonitoringAck::OsdStartMonitoringAck(const OsdStartMonitoringAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdStartMonitoringAck::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdStartMonitoringAck::~OsdStartMonitoringAck() {
  SharedDtor();
}

void OsdStartMonitoringAck::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void OsdStartMonitoringAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdStartMonitoringAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdStartMonitoringAck_descriptor_;
}

const OsdStartMonitoringAck& OsdStartMonitoringAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

OsdStartMonitoringAck* OsdStartMonitoringAck::default_instance_ = NULL;

OsdStartMonitoringAck* OsdStartMonitoringAck::New() const {
  return new OsdStartMonitoringAck;
}

void OsdStartMonitoringAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdStartMonitoringAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // required .network_messages.errorStatus error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsdStartMonitoringAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  // required .network_messages.errorStatus error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdStartMonitoringAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  // required .network_messages.errorStatus error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdStartMonitoringAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
    // required .network_messages.errorStatus error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdStartMonitoringAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdStartMonitoringAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdStartMonitoringAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdStartMonitoringAck::MergeFrom(const OsdStartMonitoringAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_error()) {
      mutable_error()->::network_messages::errorStatus::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdStartMonitoringAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStartMonitoringAck::CopyFrom(const OsdStartMonitoringAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStartMonitoringAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void OsdStartMonitoringAck::Swap(OsdStartMonitoringAck* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdStartMonitoringAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdStartMonitoringAck_descriptor_;
  metadata.reflection = OsdStartMonitoringAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecvProcStartMonitoring::kProcIdFieldNumber;
#endif  // !_MSC_VER

RecvProcStartMonitoring::RecvProcStartMonitoring()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvProcStartMonitoring::InitAsDefaultInstance() {
}

RecvProcStartMonitoring::RecvProcStartMonitoring(const RecvProcStartMonitoring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvProcStartMonitoring::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvProcStartMonitoring::~RecvProcStartMonitoring() {
  SharedDtor();
}

void RecvProcStartMonitoring::SharedDtor() {
  if (proc_id_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_id_;
  }
  if (this != default_instance_) {
  }
}

void RecvProcStartMonitoring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvProcStartMonitoring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvProcStartMonitoring_descriptor_;
}

const RecvProcStartMonitoring& RecvProcStartMonitoring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

RecvProcStartMonitoring* RecvProcStartMonitoring::default_instance_ = NULL;

RecvProcStartMonitoring* RecvProcStartMonitoring::New() const {
  return new RecvProcStartMonitoring;
}

void RecvProcStartMonitoring::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_proc_id()) {
      if (proc_id_ != &::google::protobuf::internal::kEmptyString) {
        proc_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvProcStartMonitoring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_id().data(), this->proc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvProcStartMonitoring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_id().data(), this->proc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->proc_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvProcStartMonitoring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_id().data(), this->proc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proc_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvProcStartMonitoring::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvProcStartMonitoring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvProcStartMonitoring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvProcStartMonitoring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvProcStartMonitoring::MergeFrom(const RecvProcStartMonitoring& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvProcStartMonitoring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvProcStartMonitoring::CopyFrom(const RecvProcStartMonitoring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvProcStartMonitoring::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RecvProcStartMonitoring::Swap(RecvProcStartMonitoring* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvProcStartMonitoring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvProcStartMonitoring_descriptor_;
  metadata.reflection = RecvProcStartMonitoring_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecvProcStartMonitoringAck_entry::kServiceFieldNumber;
const int RecvProcStartMonitoringAck_entry::kComponentListFieldNumber;
#endif  // !_MSC_VER

RecvProcStartMonitoringAck_entry::RecvProcStartMonitoringAck_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvProcStartMonitoringAck_entry::InitAsDefaultInstance() {
  service_ = const_cast< ::network_messages::service_obj*>(&::network_messages::service_obj::default_instance());
}

RecvProcStartMonitoringAck_entry::RecvProcStartMonitoringAck_entry(const RecvProcStartMonitoringAck_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvProcStartMonitoringAck_entry::SharedCtor() {
  _cached_size_ = 0;
  service_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvProcStartMonitoringAck_entry::~RecvProcStartMonitoringAck_entry() {
  SharedDtor();
}

void RecvProcStartMonitoringAck_entry::SharedDtor() {
  if (this != default_instance_) {
    delete service_;
  }
}

void RecvProcStartMonitoringAck_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvProcStartMonitoringAck_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvProcStartMonitoringAck_entry_descriptor_;
}

const RecvProcStartMonitoringAck_entry& RecvProcStartMonitoringAck_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

RecvProcStartMonitoringAck_entry* RecvProcStartMonitoringAck_entry::default_instance_ = NULL;

RecvProcStartMonitoringAck_entry* RecvProcStartMonitoringAck_entry::New() const {
  return new RecvProcStartMonitoringAck_entry;
}

void RecvProcStartMonitoringAck_entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service()) {
      if (service_ != NULL) service_->::network_messages::service_obj::Clear();
    }
  }
  component_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvProcStartMonitoringAck_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.service_obj service = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_component_list;
        break;
      }
      
      // repeated int32 component_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_component_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_component_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_component_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_component_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvProcStartMonitoringAck_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.service_obj service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->service(), output);
  }
  
  // repeated int32 component_list = 2;
  for (int i = 0; i < this->component_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->component_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvProcStartMonitoringAck_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.service_obj service = 1;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->service(), target);
  }
  
  // repeated int32 component_list = 2;
  for (int i = 0; i < this->component_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->component_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvProcStartMonitoringAck_entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.service_obj service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->service());
    }
    
  }
  // repeated int32 component_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->component_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->component_list(i));
    }
    total_size += 1 * this->component_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvProcStartMonitoringAck_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvProcStartMonitoringAck_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvProcStartMonitoringAck_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvProcStartMonitoringAck_entry::MergeFrom(const RecvProcStartMonitoringAck_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_list_.MergeFrom(from.component_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      mutable_service()->::network_messages::service_obj::MergeFrom(from.service());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvProcStartMonitoringAck_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvProcStartMonitoringAck_entry::CopyFrom(const RecvProcStartMonitoringAck_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvProcStartMonitoringAck_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_service()) {
    if (!this->service().IsInitialized()) return false;
  }
  return true;
}

void RecvProcStartMonitoringAck_entry::Swap(RecvProcStartMonitoringAck_entry* other) {
  if (other != this) {
    std::swap(service_, other->service_);
    component_list_.Swap(&other->component_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvProcStartMonitoringAck_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvProcStartMonitoringAck_entry_descriptor_;
  metadata.reflection = RecvProcStartMonitoringAck_entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RecvProcStartMonitoringAck::kServiceNameFieldNumber;
const int RecvProcStartMonitoringAck::kSourceServiceFieldNumber;
const int RecvProcStartMonitoringAck::kStatusFieldNumber;
#endif  // !_MSC_VER

RecvProcStartMonitoringAck::RecvProcStartMonitoringAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvProcStartMonitoringAck::InitAsDefaultInstance() {
  source_service_ = const_cast< ::network_messages::service_obj*>(&::network_messages::service_obj::default_instance());
}

RecvProcStartMonitoringAck::RecvProcStartMonitoringAck(const RecvProcStartMonitoringAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvProcStartMonitoringAck::SharedCtor() {
  _cached_size_ = 0;
  source_service_ = NULL;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvProcStartMonitoringAck::~RecvProcStartMonitoringAck() {
  SharedDtor();
}

void RecvProcStartMonitoringAck::SharedDtor() {
  if (this != default_instance_) {
    delete source_service_;
  }
}

void RecvProcStartMonitoringAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvProcStartMonitoringAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvProcStartMonitoringAck_descriptor_;
}

const RecvProcStartMonitoringAck& RecvProcStartMonitoringAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

RecvProcStartMonitoringAck* RecvProcStartMonitoringAck::default_instance_ = NULL;

RecvProcStartMonitoringAck* RecvProcStartMonitoringAck::New() const {
  return new RecvProcStartMonitoringAck;
}

void RecvProcStartMonitoringAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_source_service()) {
      if (source_service_ != NULL) source_service_->::network_messages::service_obj::Clear();
    }
    status_ = false;
  }
  service_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvProcStartMonitoringAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network_messages.RecvProcStartMonitoringAck.entry service_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_service_name;
        if (input->ExpectTag(18)) goto parse_source_service;
        break;
      }
      
      // optional .network_messages.service_obj source_service = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_service()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // required bool status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvProcStartMonitoringAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .network_messages.RecvProcStartMonitoringAck.entry service_name = 1;
  for (int i = 0; i < this->service_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->service_name(i), output);
  }
  
  // optional .network_messages.service_obj source_service = 2;
  if (has_source_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->source_service(), output);
  }
  
  // required bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvProcStartMonitoringAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .network_messages.RecvProcStartMonitoringAck.entry service_name = 1;
  for (int i = 0; i < this->service_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->service_name(i), target);
  }
  
  // optional .network_messages.service_obj source_service = 2;
  if (has_source_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->source_service(), target);
  }
  
  // required bool status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvProcStartMonitoringAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .network_messages.service_obj source_service = 2;
    if (has_source_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_service());
    }
    
    // required bool status = 3;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .network_messages.RecvProcStartMonitoringAck.entry service_name = 1;
  total_size += 1 * this->service_name_size();
  for (int i = 0; i < this->service_name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_name(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvProcStartMonitoringAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvProcStartMonitoringAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvProcStartMonitoringAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvProcStartMonitoringAck::MergeFrom(const RecvProcStartMonitoringAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_name_.MergeFrom(from.service_name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_source_service()) {
      mutable_source_service()->::network_messages::service_obj::MergeFrom(from.source_service());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvProcStartMonitoringAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvProcStartMonitoringAck::CopyFrom(const RecvProcStartMonitoringAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvProcStartMonitoringAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < service_name_size(); i++) {
    if (!this->service_name(i).IsInitialized()) return false;
  }
  if (has_source_service()) {
    if (!this->source_service().IsInitialized()) return false;
  }
  return true;
}

void RecvProcStartMonitoringAck::Swap(RecvProcStartMonitoringAck* other) {
  if (other != this) {
    service_name_.Swap(&other->service_name_);
    std::swap(source_service_, other->source_service_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvProcStartMonitoringAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvProcStartMonitoringAck_descriptor_;
  metadata.reflection = RecvProcStartMonitoringAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompTransferInfo_pair::kComponentFieldNumber;
const int CompTransferInfo_pair::kDestServiceFieldNumber;
#endif  // !_MSC_VER

CompTransferInfo_pair::CompTransferInfo_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompTransferInfo_pair::InitAsDefaultInstance() {
  dest_service_ = const_cast< ::network_messages::service_obj*>(&::network_messages::service_obj::default_instance());
}

CompTransferInfo_pair::CompTransferInfo_pair(const CompTransferInfo_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompTransferInfo_pair::SharedCtor() {
  _cached_size_ = 0;
  component_ = 0;
  dest_service_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompTransferInfo_pair::~CompTransferInfo_pair() {
  SharedDtor();
}

void CompTransferInfo_pair::SharedDtor() {
  if (this != default_instance_) {
    delete dest_service_;
  }
}

void CompTransferInfo_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompTransferInfo_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompTransferInfo_pair_descriptor_;
}

const CompTransferInfo_pair& CompTransferInfo_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

CompTransferInfo_pair* CompTransferInfo_pair::default_instance_ = NULL;

CompTransferInfo_pair* CompTransferInfo_pair::New() const {
  return new CompTransferInfo_pair;
}

void CompTransferInfo_pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    component_ = 0;
    if (has_dest_service()) {
      if (dest_service_ != NULL) dest_service_->::network_messages::service_obj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompTransferInfo_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 component = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &component_)));
          set_has_component();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest_service;
        break;
      }
      
      // required .network_messages.service_obj dest_service = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_service()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompTransferInfo_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 component = 1;
  if (has_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->component(), output);
  }
  
  // required .network_messages.service_obj dest_service = 2;
  if (has_dest_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dest_service(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompTransferInfo_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 component = 1;
  if (has_component()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->component(), target);
  }
  
  // required .network_messages.service_obj dest_service = 2;
  if (has_dest_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dest_service(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompTransferInfo_pair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 component = 1;
    if (has_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->component());
    }
    
    // required .network_messages.service_obj dest_service = 2;
    if (has_dest_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_service());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompTransferInfo_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompTransferInfo_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompTransferInfo_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompTransferInfo_pair::MergeFrom(const CompTransferInfo_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_component()) {
      set_component(from.component());
    }
    if (from.has_dest_service()) {
      mutable_dest_service()->::network_messages::service_obj::MergeFrom(from.dest_service());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompTransferInfo_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompTransferInfo_pair::CopyFrom(const CompTransferInfo_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompTransferInfo_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_dest_service()) {
    if (!this->dest_service().IsInitialized()) return false;
  }
  return true;
}

void CompTransferInfo_pair::Swap(CompTransferInfo_pair* other) {
  if (other != this) {
    std::swap(component_, other->component_);
    std::swap(dest_service_, other->dest_service_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompTransferInfo_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompTransferInfo_pair_descriptor_;
  metadata.reflection = CompTransferInfo_pair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CompTransferInfo::kServiceIdFieldNumber;
const int CompTransferInfo::kComponentServicePairFieldNumber;
#endif  // !_MSC_VER

CompTransferInfo::CompTransferInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompTransferInfo::InitAsDefaultInstance() {
}

CompTransferInfo::CompTransferInfo(const CompTransferInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompTransferInfo::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompTransferInfo::~CompTransferInfo() {
  SharedDtor();
}

void CompTransferInfo::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void CompTransferInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompTransferInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompTransferInfo_descriptor_;
}

const CompTransferInfo& CompTransferInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

CompTransferInfo* CompTransferInfo::default_instance_ = NULL;

CompTransferInfo* CompTransferInfo::New() const {
  return new CompTransferInfo;
}

void CompTransferInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
  }
  component_service_pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompTransferInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_component_service_pair;
        break;
      }
      
      // repeated .network_messages.CompTransferInfo.pair component_service_pair = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_component_service_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_component_service_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_component_service_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompTransferInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  // repeated .network_messages.CompTransferInfo.pair component_service_pair = 2;
  for (int i = 0; i < this->component_service_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->component_service_pair(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompTransferInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  // repeated .network_messages.CompTransferInfo.pair component_service_pair = 2;
  for (int i = 0; i < this->component_service_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->component_service_pair(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompTransferInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
  }
  // repeated .network_messages.CompTransferInfo.pair component_service_pair = 2;
  total_size += 1 * this->component_service_pair_size();
  for (int i = 0; i < this->component_service_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->component_service_pair(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompTransferInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompTransferInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompTransferInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompTransferInfo::MergeFrom(const CompTransferInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_service_pair_.MergeFrom(from.component_service_pair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompTransferInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompTransferInfo::CopyFrom(const CompTransferInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompTransferInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < component_service_pair_size(); i++) {
    if (!this->component_service_pair(i).IsInitialized()) return false;
  }
  return true;
}

void CompTransferInfo::Swap(CompTransferInfo* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    component_service_pair_.Swap(&other->component_service_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompTransferInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompTransferInfo_descriptor_;
  metadata.reflection = CompTransferInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompTranferFinalStat_pair::kComponentFieldNumber;
const int CompTranferFinalStat_pair::kStatusFieldNumber;
#endif  // !_MSC_VER

CompTranferFinalStat_pair::CompTranferFinalStat_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompTranferFinalStat_pair::InitAsDefaultInstance() {
}

CompTranferFinalStat_pair::CompTranferFinalStat_pair(const CompTranferFinalStat_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompTranferFinalStat_pair::SharedCtor() {
  _cached_size_ = 0;
  component_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompTranferFinalStat_pair::~CompTranferFinalStat_pair() {
  SharedDtor();
}

void CompTranferFinalStat_pair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompTranferFinalStat_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompTranferFinalStat_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompTranferFinalStat_pair_descriptor_;
}

const CompTranferFinalStat_pair& CompTranferFinalStat_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

CompTranferFinalStat_pair* CompTranferFinalStat_pair::default_instance_ = NULL;

CompTranferFinalStat_pair* CompTranferFinalStat_pair::New() const {
  return new CompTranferFinalStat_pair;
}

void CompTranferFinalStat_pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    component_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompTranferFinalStat_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 component = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &component_)));
          set_has_component();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompTranferFinalStat_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 component = 1;
  if (has_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->component(), output);
  }
  
  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompTranferFinalStat_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 component = 1;
  if (has_component()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->component(), target);
  }
  
  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompTranferFinalStat_pair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 component = 1;
    if (has_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->component());
    }
    
    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompTranferFinalStat_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompTranferFinalStat_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompTranferFinalStat_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompTranferFinalStat_pair::MergeFrom(const CompTranferFinalStat_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_component()) {
      set_component(from.component());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompTranferFinalStat_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompTranferFinalStat_pair::CopyFrom(const CompTranferFinalStat_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompTranferFinalStat_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CompTranferFinalStat_pair::Swap(CompTranferFinalStat_pair* other) {
  if (other != this) {
    std::swap(component_, other->component_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompTranferFinalStat_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompTranferFinalStat_pair_descriptor_;
  metadata.reflection = CompTranferFinalStat_pair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CompTranferFinalStat::kServiceIdFieldNumber;
const int CompTranferFinalStat::kCompStatusListFieldNumber;
const int CompTranferFinalStat::kFinalStatusFieldNumber;
#endif  // !_MSC_VER

CompTranferFinalStat::CompTranferFinalStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompTranferFinalStat::InitAsDefaultInstance() {
}

CompTranferFinalStat::CompTranferFinalStat(const CompTranferFinalStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompTranferFinalStat::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  final_status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompTranferFinalStat::~CompTranferFinalStat() {
  SharedDtor();
}

void CompTranferFinalStat::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void CompTranferFinalStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompTranferFinalStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompTranferFinalStat_descriptor_;
}

const CompTranferFinalStat& CompTranferFinalStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

CompTranferFinalStat* CompTranferFinalStat::default_instance_ = NULL;

CompTranferFinalStat* CompTranferFinalStat::New() const {
  return new CompTranferFinalStat;
}

void CompTranferFinalStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    final_status_ = false;
  }
  comp_status_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompTranferFinalStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comp_status_list;
        break;
      }
      
      // repeated .network_messages.CompTranferFinalStat.pair comp_status_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comp_status_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comp_status_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comp_status_list;
        if (input->ExpectTag(24)) goto parse_final_status;
        break;
      }
      
      // required bool final_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &final_status_)));
          set_has_final_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompTranferFinalStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  // repeated .network_messages.CompTranferFinalStat.pair comp_status_list = 2;
  for (int i = 0; i < this->comp_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->comp_status_list(i), output);
  }
  
  // required bool final_status = 3;
  if (has_final_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->final_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompTranferFinalStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  // repeated .network_messages.CompTranferFinalStat.pair comp_status_list = 2;
  for (int i = 0; i < this->comp_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->comp_status_list(i), target);
  }
  
  // required bool final_status = 3;
  if (has_final_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->final_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompTranferFinalStat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
    // required bool final_status = 3;
    if (has_final_status()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .network_messages.CompTranferFinalStat.pair comp_status_list = 2;
  total_size += 1 * this->comp_status_list_size();
  for (int i = 0; i < this->comp_status_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comp_status_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompTranferFinalStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompTranferFinalStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompTranferFinalStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompTranferFinalStat::MergeFrom(const CompTranferFinalStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  comp_status_list_.MergeFrom(from.comp_status_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_final_status()) {
      set_final_status(from.final_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompTranferFinalStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompTranferFinalStat::CopyFrom(const CompTranferFinalStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompTranferFinalStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < comp_status_list_size(); i++) {
    if (!this->comp_status_list(i).IsInitialized()) return false;
  }
  return true;
}

void CompTranferFinalStat::Swap(CompTranferFinalStat* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    comp_status_list_.Swap(&other->comp_status_list_);
    std::swap(final_status_, other->final_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompTranferFinalStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompTranferFinalStat_descriptor_;
  metadata.reflection = CompTranferFinalStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferComp_pair::kDestServiceFieldNumber;
const int TransferComp_pair::kComponentFieldNumber;
#endif  // !_MSC_VER

TransferComp_pair::TransferComp_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferComp_pair::InitAsDefaultInstance() {
  dest_service_ = const_cast< ::network_messages::service_obj*>(&::network_messages::service_obj::default_instance());
}

TransferComp_pair::TransferComp_pair(const TransferComp_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferComp_pair::SharedCtor() {
  _cached_size_ = 0;
  dest_service_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferComp_pair::~TransferComp_pair() {
  SharedDtor();
}

void TransferComp_pair::SharedDtor() {
  if (this != default_instance_) {
    delete dest_service_;
  }
}

void TransferComp_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferComp_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferComp_pair_descriptor_;
}

const TransferComp_pair& TransferComp_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

TransferComp_pair* TransferComp_pair::default_instance_ = NULL;

TransferComp_pair* TransferComp_pair::New() const {
  return new TransferComp_pair;
}

void TransferComp_pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dest_service()) {
      if (dest_service_ != NULL) dest_service_->::network_messages::service_obj::Clear();
    }
  }
  component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferComp_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.service_obj dest_service = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_service()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_component;
        break;
      }
      
      // repeated int32 component = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_component:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_component())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_component())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_component;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferComp_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.service_obj dest_service = 1;
  if (has_dest_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dest_service(), output);
  }
  
  // repeated int32 component = 2;
  for (int i = 0; i < this->component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->component(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferComp_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.service_obj dest_service = 1;
  if (has_dest_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dest_service(), target);
  }
  
  // repeated int32 component = 2;
  for (int i = 0; i < this->component_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->component(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferComp_pair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.service_obj dest_service = 1;
    if (has_dest_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_service());
    }
    
  }
  // repeated int32 component = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->component_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->component(i));
    }
    total_size += 1 * this->component_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferComp_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferComp_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferComp_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferComp_pair::MergeFrom(const TransferComp_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_.MergeFrom(from.component_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_service()) {
      mutable_dest_service()->::network_messages::service_obj::MergeFrom(from.dest_service());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferComp_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferComp_pair::CopyFrom(const TransferComp_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferComp_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_dest_service()) {
    if (!this->dest_service().IsInitialized()) return false;
  }
  return true;
}

void TransferComp_pair::Swap(TransferComp_pair* other) {
  if (other != this) {
    std::swap(dest_service_, other->dest_service_);
    component_.Swap(&other->component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferComp_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferComp_pair_descriptor_;
  metadata.reflection = TransferComp_pair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TransferComp::kServiceCompListFieldNumber;
#endif  // !_MSC_VER

TransferComp::TransferComp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferComp::InitAsDefaultInstance() {
}

TransferComp::TransferComp(const TransferComp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferComp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferComp::~TransferComp() {
  SharedDtor();
}

void TransferComp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferComp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferComp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferComp_descriptor_;
}

const TransferComp& TransferComp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

TransferComp* TransferComp::default_instance_ = NULL;

TransferComp* TransferComp::New() const {
  return new TransferComp;
}

void TransferComp::Clear() {
  service_comp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferComp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network_messages.TransferComp.pair service_comp_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_comp_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_comp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_service_comp_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferComp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .network_messages.TransferComp.pair service_comp_list = 1;
  for (int i = 0; i < this->service_comp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->service_comp_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferComp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .network_messages.TransferComp.pair service_comp_list = 1;
  for (int i = 0; i < this->service_comp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->service_comp_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferComp::ByteSize() const {
  int total_size = 0;
  
  // repeated .network_messages.TransferComp.pair service_comp_list = 1;
  total_size += 1 * this->service_comp_list_size();
  for (int i = 0; i < this->service_comp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_comp_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferComp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferComp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferComp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferComp::MergeFrom(const TransferComp& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_comp_list_.MergeFrom(from.service_comp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferComp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferComp::CopyFrom(const TransferComp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferComp::IsInitialized() const {
  
  for (int i = 0; i < service_comp_list_size(); i++) {
    if (!this->service_comp_list(i).IsInitialized()) return false;
  }
  return true;
}

void TransferComp::Swap(TransferComp* other) {
  if (other != this) {
    service_comp_list_.Swap(&other->service_comp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferComp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferComp_descriptor_;
  metadata.reflection = TransferComp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeAdditionCli::kNodeListFieldNumber;
#endif  // !_MSC_VER

NodeAdditionCli::NodeAdditionCli()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeAdditionCli::InitAsDefaultInstance() {
}

NodeAdditionCli::NodeAdditionCli(const NodeAdditionCli& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeAdditionCli::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeAdditionCli::~NodeAdditionCli() {
  SharedDtor();
}

void NodeAdditionCli::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeAdditionCli::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeAdditionCli::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeAdditionCli_descriptor_;
}

const NodeAdditionCli& NodeAdditionCli::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeAdditionCli* NodeAdditionCli::default_instance_ = NULL;

NodeAdditionCli* NodeAdditionCli::New() const {
  return new NodeAdditionCli;
}

void NodeAdditionCli::Clear() {
  node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeAdditionCli::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network_messages.service_obj node_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_node_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeAdditionCli::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .network_messages.service_obj node_list = 1;
  for (int i = 0; i < this->node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeAdditionCli::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .network_messages.service_obj node_list = 1;
  for (int i = 0; i < this->node_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeAdditionCli::ByteSize() const {
  int total_size = 0;
  
  // repeated .network_messages.service_obj node_list = 1;
  total_size += 1 * this->node_list_size();
  for (int i = 0; i < this->node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeAdditionCli::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeAdditionCli* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeAdditionCli*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeAdditionCli::MergeFrom(const NodeAdditionCli& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_list_.MergeFrom(from.node_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeAdditionCli::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAdditionCli::CopyFrom(const NodeAdditionCli& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAdditionCli::IsInitialized() const {
  
  for (int i = 0; i < node_list_size(); i++) {
    if (!this->node_list(i).IsInitialized()) return false;
  }
  return true;
}

void NodeAdditionCli::Swap(NodeAdditionCli* other) {
  if (other != this) {
    node_list_.Swap(&other->node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeAdditionCli::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeAdditionCli_descriptor_;
  metadata.reflection = NodeAdditionCli_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeAdditionCliAck_pair::kStatusFieldNumber;
const int NodeAdditionCliAck_pair::kNodeFieldNumber;
#endif  // !_MSC_VER

NodeAdditionCliAck_pair::NodeAdditionCliAck_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeAdditionCliAck_pair::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
  node_ = const_cast< ::network_messages::service_obj*>(&::network_messages::service_obj::default_instance());
}

NodeAdditionCliAck_pair::NodeAdditionCliAck_pair(const NodeAdditionCliAck_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeAdditionCliAck_pair::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeAdditionCliAck_pair::~NodeAdditionCliAck_pair() {
  SharedDtor();
}

void NodeAdditionCliAck_pair::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete node_;
  }
}

void NodeAdditionCliAck_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeAdditionCliAck_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeAdditionCliAck_pair_descriptor_;
}

const NodeAdditionCliAck_pair& NodeAdditionCliAck_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeAdditionCliAck_pair* NodeAdditionCliAck_pair::default_instance_ = NULL;

NodeAdditionCliAck_pair* NodeAdditionCliAck_pair::New() const {
  return new NodeAdditionCliAck_pair;
}

void NodeAdditionCliAck_pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
    if (has_node()) {
      if (node_ != NULL) node_->::network_messages::service_obj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeAdditionCliAck_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.errorStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }
      
      // required .network_messages.service_obj node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeAdditionCliAck_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.errorStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // required .network_messages.service_obj node = 2;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeAdditionCliAck_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.errorStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // required .network_messages.service_obj node = 2;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeAdditionCliAck_pair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.errorStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // required .network_messages.service_obj node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeAdditionCliAck_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeAdditionCliAck_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeAdditionCliAck_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeAdditionCliAck_pair::MergeFrom(const NodeAdditionCliAck_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
    if (from.has_node()) {
      mutable_node()->::network_messages::service_obj::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeAdditionCliAck_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAdditionCliAck_pair::CopyFrom(const NodeAdditionCliAck_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAdditionCliAck_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void NodeAdditionCliAck_pair::Swap(NodeAdditionCliAck_pair* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeAdditionCliAck_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeAdditionCliAck_pair_descriptor_;
  metadata.reflection = NodeAdditionCliAck_pair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeAdditionCliAck::kNodeAckListFieldNumber;
#endif  // !_MSC_VER

NodeAdditionCliAck::NodeAdditionCliAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeAdditionCliAck::InitAsDefaultInstance() {
}

NodeAdditionCliAck::NodeAdditionCliAck(const NodeAdditionCliAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeAdditionCliAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeAdditionCliAck::~NodeAdditionCliAck() {
  SharedDtor();
}

void NodeAdditionCliAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeAdditionCliAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeAdditionCliAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeAdditionCliAck_descriptor_;
}

const NodeAdditionCliAck& NodeAdditionCliAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeAdditionCliAck* NodeAdditionCliAck::default_instance_ = NULL;

NodeAdditionCliAck* NodeAdditionCliAck::New() const {
  return new NodeAdditionCliAck;
}

void NodeAdditionCliAck::Clear() {
  node_ack_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeAdditionCliAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network_messages.NodeAdditionCliAck.pair node_ack_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_ack_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_ack_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_node_ack_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeAdditionCliAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .network_messages.NodeAdditionCliAck.pair node_ack_list = 1;
  for (int i = 0; i < this->node_ack_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_ack_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeAdditionCliAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .network_messages.NodeAdditionCliAck.pair node_ack_list = 1;
  for (int i = 0; i < this->node_ack_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_ack_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeAdditionCliAck::ByteSize() const {
  int total_size = 0;
  
  // repeated .network_messages.NodeAdditionCliAck.pair node_ack_list = 1;
  total_size += 1 * this->node_ack_list_size();
  for (int i = 0; i < this->node_ack_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_ack_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeAdditionCliAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeAdditionCliAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeAdditionCliAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeAdditionCliAck::MergeFrom(const NodeAdditionCliAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_ack_list_.MergeFrom(from.node_ack_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeAdditionCliAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAdditionCliAck::CopyFrom(const NodeAdditionCliAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAdditionCliAck::IsInitialized() const {
  
  for (int i = 0; i < node_ack_list_size(); i++) {
    if (!this->node_ack_list(i).IsInitialized()) return false;
  }
  return true;
}

void NodeAdditionCliAck::Swap(NodeAdditionCliAck* other) {
  if (other != this) {
    node_ack_list_.Swap(&other->node_ack_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeAdditionCliAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeAdditionCliAck_descriptor_;
  metadata.reflection = NodeAdditionCliAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeAdditionGl::kServiceIdFieldNumber;
#endif  // !_MSC_VER

NodeAdditionGl::NodeAdditionGl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeAdditionGl::InitAsDefaultInstance() {
}

NodeAdditionGl::NodeAdditionGl(const NodeAdditionGl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeAdditionGl::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeAdditionGl::~NodeAdditionGl() {
  SharedDtor();
}

void NodeAdditionGl::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void NodeAdditionGl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeAdditionGl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeAdditionGl_descriptor_;
}

const NodeAdditionGl& NodeAdditionGl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeAdditionGl* NodeAdditionGl::default_instance_ = NULL;

NodeAdditionGl* NodeAdditionGl::New() const {
  return new NodeAdditionGl;
}

void NodeAdditionGl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeAdditionGl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeAdditionGl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeAdditionGl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeAdditionGl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeAdditionGl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeAdditionGl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeAdditionGl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeAdditionGl::MergeFrom(const NodeAdditionGl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeAdditionGl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAdditionGl::CopyFrom(const NodeAdditionGl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAdditionGl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NodeAdditionGl::Swap(NodeAdditionGl* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeAdditionGl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeAdditionGl_descriptor_;
  metadata.reflection = NodeAdditionGl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeAdditionGlAck::kStatusFieldNumber;
const int NodeAdditionGlAck::kServiceListFieldNumber;
#endif  // !_MSC_VER

NodeAdditionGlAck::NodeAdditionGlAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeAdditionGlAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

NodeAdditionGlAck::NodeAdditionGlAck(const NodeAdditionGlAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeAdditionGlAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeAdditionGlAck::~NodeAdditionGlAck() {
  SharedDtor();
}

void NodeAdditionGlAck::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void NodeAdditionGlAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeAdditionGlAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeAdditionGlAck_descriptor_;
}

const NodeAdditionGlAck& NodeAdditionGlAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeAdditionGlAck* NodeAdditionGlAck::default_instance_ = NULL;

NodeAdditionGlAck* NodeAdditionGlAck::New() const {
  return new NodeAdditionGlAck;
}

void NodeAdditionGlAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  service_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeAdditionGlAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.errorStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_list;
        break;
      }
      
      // repeated .network_messages.service_obj service_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeAdditionGlAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.errorStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // repeated .network_messages.service_obj service_list = 2;
  for (int i = 0; i < this->service_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->service_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeAdditionGlAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.errorStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // repeated .network_messages.service_obj service_list = 2;
  for (int i = 0; i < this->service_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->service_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeAdditionGlAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.errorStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  // repeated .network_messages.service_obj service_list = 2;
  total_size += 1 * this->service_list_size();
  for (int i = 0; i < this->service_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeAdditionGlAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeAdditionGlAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeAdditionGlAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeAdditionGlAck::MergeFrom(const NodeAdditionGlAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_list_.MergeFrom(from.service_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeAdditionGlAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAdditionGlAck::CopyFrom(const NodeAdditionGlAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAdditionGlAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  for (int i = 0; i < service_list_size(); i++) {
    if (!this->service_list(i).IsInitialized()) return false;
  }
  return true;
}

void NodeAdditionGlAck::Swap(NodeAdditionGlAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    service_list_.Swap(&other->service_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeAdditionGlAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeAdditionGlAck_descriptor_;
  metadata.reflection = NodeAdditionGlAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeStopLL::kNodeFieldNumber;
#endif  // !_MSC_VER

NodeStopLL::NodeStopLL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeStopLL::InitAsDefaultInstance() {
  node_ = const_cast< ::network_messages::service_obj*>(&::network_messages::service_obj::default_instance());
}

NodeStopLL::NodeStopLL(const NodeStopLL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeStopLL::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeStopLL::~NodeStopLL() {
  SharedDtor();
}

void NodeStopLL::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void NodeStopLL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStopLL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStopLL_descriptor_;
}

const NodeStopLL& NodeStopLL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeStopLL* NodeStopLL::default_instance_ = NULL;

NodeStopLL* NodeStopLL::New() const {
  return new NodeStopLL;
}

void NodeStopLL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node()) {
      if (node_ != NULL) node_->::network_messages::service_obj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeStopLL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.service_obj node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeStopLL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.service_obj node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeStopLL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.service_obj node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeStopLL::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.service_obj node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStopLL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeStopLL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeStopLL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeStopLL::MergeFrom(const NodeStopLL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::network_messages::service_obj::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeStopLL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStopLL::CopyFrom(const NodeStopLL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStopLL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void NodeStopLL::Swap(NodeStopLL* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeStopLL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStopLL_descriptor_;
  metadata.reflection = NodeStopLL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeStopLLAck::kNodeIdFieldNumber;
const int NodeStopLLAck::kStatusFieldNumber;
const int NodeStopLLAck::kNodeStatusFieldNumber;
#endif  // !_MSC_VER

NodeStopLLAck::NodeStopLLAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeStopLLAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

NodeStopLLAck::NodeStopLLAck(const NodeStopLLAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeStopLLAck::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  node_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeStopLLAck::~NodeStopLLAck() {
  SharedDtor();
}

void NodeStopLLAck::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void NodeStopLLAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStopLLAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStopLLAck_descriptor_;
}

const NodeStopLLAck& NodeStopLLAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeStopLLAck* NodeStopLLAck::default_instance_ = NULL;

NodeStopLLAck* NodeStopLLAck::New() const {
  return new NodeStopLLAck;
}

void NodeStopLLAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
    node_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeStopLLAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required .network_messages.errorStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_node_status;
        break;
      }
      
      // required int32 node_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_status_)));
          set_has_node_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeStopLLAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  // required int32 node_status = 3;
  if (has_node_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->node_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeStopLLAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  // required int32 node_status = 3;
  if (has_node_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->node_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeStopLLAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
    // required .network_messages.errorStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // required int32 node_status = 3;
    if (has_node_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStopLLAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeStopLLAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeStopLLAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeStopLLAck::MergeFrom(const NodeStopLLAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
    if (from.has_node_status()) {
      set_node_status(from.node_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeStopLLAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStopLLAck::CopyFrom(const NodeStopLLAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStopLLAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void NodeStopLLAck::Swap(NodeStopLLAck* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(status_, other->status_);
    std::swap(node_status_, other->node_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeStopLLAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStopLLAck_descriptor_;
  metadata.reflection = NodeStopLLAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeRetire::kNodeFieldNumber;
#endif  // !_MSC_VER

NodeRetire::NodeRetire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeRetire::InitAsDefaultInstance() {
  node_ = const_cast< ::network_messages::service_obj*>(&::network_messages::service_obj::default_instance());
}

NodeRetire::NodeRetire(const NodeRetire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeRetire::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRetire::~NodeRetire() {
  SharedDtor();
}

void NodeRetire::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void NodeRetire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRetire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRetire_descriptor_;
}

const NodeRetire& NodeRetire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeRetire* NodeRetire::default_instance_ = NULL;

NodeRetire* NodeRetire::New() const {
  return new NodeRetire;
}

void NodeRetire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node()) {
      if (node_ != NULL) node_->::network_messages::service_obj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeRetire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.service_obj node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeRetire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.service_obj node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeRetire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.service_obj node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeRetire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.service_obj node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRetire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeRetire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeRetire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRetire::MergeFrom(const NodeRetire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::network_messages::service_obj::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeRetire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRetire::CopyFrom(const NodeRetire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRetire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void NodeRetire::Swap(NodeRetire* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeRetire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRetire_descriptor_;
  metadata.reflection = NodeRetire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeRetireAck::kNodeIdFieldNumber;
const int NodeRetireAck::kStatusFieldNumber;
#endif  // !_MSC_VER

NodeRetireAck::NodeRetireAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeRetireAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

NodeRetireAck::NodeRetireAck(const NodeRetireAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeRetireAck::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRetireAck::~NodeRetireAck() {
  SharedDtor();
}

void NodeRetireAck::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void NodeRetireAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRetireAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRetireAck_descriptor_;
}

const NodeRetireAck& NodeRetireAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeRetireAck* NodeRetireAck::default_instance_ = NULL;

NodeRetireAck* NodeRetireAck::New() const {
  return new NodeRetireAck;
}

void NodeRetireAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeRetireAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required .network_messages.errorStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeRetireAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeRetireAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeRetireAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
    // required .network_messages.errorStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRetireAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeRetireAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeRetireAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRetireAck::MergeFrom(const NodeRetireAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeRetireAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRetireAck::CopyFrom(const NodeRetireAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRetireAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void NodeRetireAck::Swap(NodeRetireAck* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeRetireAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRetireAck_descriptor_;
  metadata.reflection = NodeRetireAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeDeletionCli::kNodeFieldNumber;
#endif  // !_MSC_VER

NodeDeletionCli::NodeDeletionCli()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeDeletionCli::InitAsDefaultInstance() {
  node_ = const_cast< ::network_messages::service_obj*>(&::network_messages::service_obj::default_instance());
}

NodeDeletionCli::NodeDeletionCli(const NodeDeletionCli& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeDeletionCli::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeDeletionCli::~NodeDeletionCli() {
  SharedDtor();
}

void NodeDeletionCli::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void NodeDeletionCli::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDeletionCli::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDeletionCli_descriptor_;
}

const NodeDeletionCli& NodeDeletionCli::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeDeletionCli* NodeDeletionCli::default_instance_ = NULL;

NodeDeletionCli* NodeDeletionCli::New() const {
  return new NodeDeletionCli;
}

void NodeDeletionCli::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node()) {
      if (node_ != NULL) node_->::network_messages::service_obj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeDeletionCli::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.service_obj node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeDeletionCli::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.service_obj node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeDeletionCli::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.service_obj node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeDeletionCli::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.service_obj node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDeletionCli::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeDeletionCli* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeDeletionCli*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeDeletionCli::MergeFrom(const NodeDeletionCli& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::network_messages::service_obj::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeDeletionCli::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDeletionCli::CopyFrom(const NodeDeletionCli& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDeletionCli::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void NodeDeletionCli::Swap(NodeDeletionCli* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeDeletionCli::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDeletionCli_descriptor_;
  metadata.reflection = NodeDeletionCli_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeDeletionCliAck::kNodeIdFieldNumber;
const int NodeDeletionCliAck::kStatusFieldNumber;
#endif  // !_MSC_VER

NodeDeletionCliAck::NodeDeletionCliAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeDeletionCliAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

NodeDeletionCliAck::NodeDeletionCliAck(const NodeDeletionCliAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeDeletionCliAck::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeDeletionCliAck::~NodeDeletionCliAck() {
  SharedDtor();
}

void NodeDeletionCliAck::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void NodeDeletionCliAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDeletionCliAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDeletionCliAck_descriptor_;
}

const NodeDeletionCliAck& NodeDeletionCliAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeDeletionCliAck* NodeDeletionCliAck::default_instance_ = NULL;

NodeDeletionCliAck* NodeDeletionCliAck::New() const {
  return new NodeDeletionCliAck;
}

void NodeDeletionCliAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeDeletionCliAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required .network_messages.errorStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeDeletionCliAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeDeletionCliAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeDeletionCliAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
    // required .network_messages.errorStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDeletionCliAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeDeletionCliAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeDeletionCliAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeDeletionCliAck::MergeFrom(const NodeDeletionCliAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeDeletionCliAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDeletionCliAck::CopyFrom(const NodeDeletionCliAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDeletionCliAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void NodeDeletionCliAck::Swap(NodeDeletionCliAck* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeDeletionCliAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDeletionCliAck_descriptor_;
  metadata.reflection = NodeDeletionCliAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeSystemStopCli::kNodeIdFieldNumber;
#endif  // !_MSC_VER

NodeSystemStopCli::NodeSystemStopCli()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeSystemStopCli::InitAsDefaultInstance() {
}

NodeSystemStopCli::NodeSystemStopCli(const NodeSystemStopCli& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeSystemStopCli::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeSystemStopCli::~NodeSystemStopCli() {
  SharedDtor();
}

void NodeSystemStopCli::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void NodeSystemStopCli::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeSystemStopCli::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeSystemStopCli_descriptor_;
}

const NodeSystemStopCli& NodeSystemStopCli::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeSystemStopCli* NodeSystemStopCli::default_instance_ = NULL;

NodeSystemStopCli* NodeSystemStopCli::New() const {
  return new NodeSystemStopCli;
}

void NodeSystemStopCli::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeSystemStopCli::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeSystemStopCli::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeSystemStopCli::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeSystemStopCli::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeSystemStopCli::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeSystemStopCli* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeSystemStopCli*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeSystemStopCli::MergeFrom(const NodeSystemStopCli& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeSystemStopCli::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeSystemStopCli::CopyFrom(const NodeSystemStopCli& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeSystemStopCli::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NodeSystemStopCli::Swap(NodeSystemStopCli* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeSystemStopCli::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeSystemStopCli_descriptor_;
  metadata.reflection = NodeSystemStopCli_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalNodeStatus::kNodeIdFieldNumber;
#endif  // !_MSC_VER

LocalNodeStatus::LocalNodeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalNodeStatus::InitAsDefaultInstance() {
}

LocalNodeStatus::LocalNodeStatus(const LocalNodeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalNodeStatus::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalNodeStatus::~LocalNodeStatus() {
  SharedDtor();
}

void LocalNodeStatus::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void LocalNodeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalNodeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalNodeStatus_descriptor_;
}

const LocalNodeStatus& LocalNodeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

LocalNodeStatus* LocalNodeStatus::default_instance_ = NULL;

LocalNodeStatus* LocalNodeStatus::New() const {
  return new LocalNodeStatus;
}

void LocalNodeStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalNodeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalNodeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalNodeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalNodeStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalNodeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalNodeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalNodeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalNodeStatus::MergeFrom(const LocalNodeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalNodeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalNodeStatus::CopyFrom(const LocalNodeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalNodeStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LocalNodeStatus::Swap(LocalNodeStatus* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalNodeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalNodeStatus_descriptor_;
  metadata.reflection = LocalNodeStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeStatus::kNodeFieldNumber;
#endif  // !_MSC_VER

NodeStatus::NodeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeStatus::InitAsDefaultInstance() {
  node_ = const_cast< ::network_messages::service_obj*>(&::network_messages::service_obj::default_instance());
}

NodeStatus::NodeStatus(const NodeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeStatus::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeStatus::~NodeStatus() {
  SharedDtor();
}

void NodeStatus::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void NodeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStatus_descriptor_;
}

const NodeStatus& NodeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeStatus* NodeStatus::default_instance_ = NULL;

NodeStatus* NodeStatus::New() const {
  return new NodeStatus;
}

void NodeStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node()) {
      if (node_ != NULL) node_->::network_messages::service_obj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.service_obj node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.service_obj node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.service_obj node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.service_obj node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeStatus::MergeFrom(const NodeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::network_messages::service_obj::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStatus::CopyFrom(const NodeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void NodeStatus::Swap(NodeStatus* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStatus_descriptor_;
  metadata.reflection = NodeStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeStatusAck::kStatusFieldNumber;
#endif  // !_MSC_VER

NodeStatusAck::NodeStatusAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeStatusAck::InitAsDefaultInstance() {
}

NodeStatusAck::NodeStatusAck(const NodeStatusAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeStatusAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeStatusAck::~NodeStatusAck() {
  SharedDtor();
}

void NodeStatusAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeStatusAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStatusAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStatusAck_descriptor_;
}

const NodeStatusAck& NodeStatusAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeStatusAck* NodeStatusAck::default_instance_ = NULL;

NodeStatusAck* NodeStatusAck::New() const {
  return new NodeStatusAck;
}

void NodeStatusAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeStatusAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.NodeStatusEnum status = 1 [default = INVALID_NODE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (network_messages::NodeStatusEnum_IsValid(value)) {
            set_status(static_cast< network_messages::NodeStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeStatusAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.NodeStatusEnum status = 1 [default = INVALID_NODE];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeStatusAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.NodeStatusEnum status = 1 [default = INVALID_NODE];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeStatusAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.NodeStatusEnum status = 1 [default = INVALID_NODE];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStatusAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeStatusAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeStatusAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeStatusAck::MergeFrom(const NodeStatusAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeStatusAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStatusAck::CopyFrom(const NodeStatusAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStatusAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NodeStatusAck::Swap(NodeStatusAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeStatusAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStatusAck_descriptor_;
  metadata.reflection = NodeStatusAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeStopCli::kNodeIdFieldNumber;
#endif  // !_MSC_VER

NodeStopCli::NodeStopCli()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeStopCli::InitAsDefaultInstance() {
}

NodeStopCli::NodeStopCli(const NodeStopCli& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeStopCli::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeStopCli::~NodeStopCli() {
  SharedDtor();
}

void NodeStopCli::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void NodeStopCli::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStopCli::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStopCli_descriptor_;
}

const NodeStopCli& NodeStopCli::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeStopCli* NodeStopCli::default_instance_ = NULL;

NodeStopCli* NodeStopCli::New() const {
  return new NodeStopCli;
}

void NodeStopCli::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeStopCli::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeStopCli::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeStopCli::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeStopCli::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStopCli::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeStopCli* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeStopCli*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeStopCli::MergeFrom(const NodeStopCli& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeStopCli::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStopCli::CopyFrom(const NodeStopCli& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStopCli::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NodeStopCli::Swap(NodeStopCli* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeStopCli::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStopCli_descriptor_;
  metadata.reflection = NodeStopCli_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeStopCliAck::kStatusFieldNumber;
#endif  // !_MSC_VER

NodeStopCliAck::NodeStopCliAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeStopCliAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

NodeStopCliAck::NodeStopCliAck(const NodeStopCliAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeStopCliAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeStopCliAck::~NodeStopCliAck() {
  SharedDtor();
}

void NodeStopCliAck::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void NodeStopCliAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStopCliAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStopCliAck_descriptor_;
}

const NodeStopCliAck& NodeStopCliAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeStopCliAck* NodeStopCliAck::default_instance_ = NULL;

NodeStopCliAck* NodeStopCliAck::New() const {
  return new NodeStopCliAck;
}

void NodeStopCliAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeStopCliAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.errorStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeStopCliAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.errorStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeStopCliAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.errorStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeStopCliAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.errorStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStopCliAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeStopCliAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeStopCliAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeStopCliAck::MergeFrom(const NodeStopCliAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeStopCliAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStopCliAck::CopyFrom(const NodeStopCliAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStopCliAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void NodeStopCliAck::Swap(NodeStopCliAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeStopCliAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStopCliAck_descriptor_;
  metadata.reflection = NodeStopCliAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopServices::kServiceIdFieldNumber;
#endif  // !_MSC_VER

StopServices::StopServices()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopServices::InitAsDefaultInstance() {
}

StopServices::StopServices(const StopServices& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopServices::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopServices::~StopServices() {
  SharedDtor();
}

void StopServices::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void StopServices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopServices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopServices_descriptor_;
}

const StopServices& StopServices::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

StopServices* StopServices::default_instance_ = NULL;

StopServices* StopServices::New() const {
  return new StopServices;
}

void StopServices::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopServices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopServices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopServices::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopServices::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopServices::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopServices* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopServices*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopServices::MergeFrom(const StopServices& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopServices::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServices::CopyFrom(const StopServices& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServices::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StopServices::Swap(StopServices* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopServices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopServices_descriptor_;
  metadata.reflection = StopServices_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopServicesAck::kStatusFieldNumber;
#endif  // !_MSC_VER

StopServicesAck::StopServicesAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopServicesAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

StopServicesAck::StopServicesAck(const StopServicesAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopServicesAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopServicesAck::~StopServicesAck() {
  SharedDtor();
}

void StopServicesAck::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void StopServicesAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopServicesAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopServicesAck_descriptor_;
}

const StopServicesAck& StopServicesAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

StopServicesAck* StopServicesAck::default_instance_ = NULL;

StopServicesAck* StopServicesAck::New() const {
  return new StopServicesAck;
}

void StopServicesAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopServicesAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.errorStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopServicesAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.errorStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopServicesAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.errorStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopServicesAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.errorStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopServicesAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopServicesAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopServicesAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopServicesAck::MergeFrom(const StopServicesAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopServicesAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServicesAck::CopyFrom(const StopServicesAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServicesAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void StopServicesAck::Swap(StopServicesAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopServicesAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopServicesAck_descriptor_;
  metadata.reflection = StopServicesAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeFailover::kNodeIdFieldNumber;
const int NodeFailover::kStatusFieldNumber;
#endif  // !_MSC_VER

NodeFailover::NodeFailover()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeFailover::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

NodeFailover::NodeFailover(const NodeFailover& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeFailover::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeFailover::~NodeFailover() {
  SharedDtor();
}

void NodeFailover::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void NodeFailover::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeFailover::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeFailover_descriptor_;
}

const NodeFailover& NodeFailover::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeFailover* NodeFailover::default_instance_ = NULL;

NodeFailover* NodeFailover::New() const {
  return new NodeFailover;
}

void NodeFailover::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeFailover::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required .network_messages.errorStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeFailover::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeFailover::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeFailover::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
    // required .network_messages.errorStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeFailover::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeFailover* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeFailover*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeFailover::MergeFrom(const NodeFailover& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeFailover::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeFailover::CopyFrom(const NodeFailover& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeFailover::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void NodeFailover::Swap(NodeFailover* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeFailover::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeFailover_descriptor_;
  metadata.reflection = NodeFailover_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeFailoverAck::kStatusFieldNumber;
#endif  // !_MSC_VER

NodeFailoverAck::NodeFailoverAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeFailoverAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

NodeFailoverAck::NodeFailoverAck(const NodeFailoverAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeFailoverAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeFailoverAck::~NodeFailoverAck() {
  SharedDtor();
}

void NodeFailoverAck::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void NodeFailoverAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeFailoverAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeFailoverAck_descriptor_;
}

const NodeFailoverAck& NodeFailoverAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeFailoverAck* NodeFailoverAck::default_instance_ = NULL;

NodeFailoverAck* NodeFailoverAck::New() const {
  return new NodeFailoverAck;
}

void NodeFailoverAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeFailoverAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_messages.errorStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeFailoverAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeFailoverAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeFailoverAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_messages.errorStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeFailoverAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeFailoverAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeFailoverAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeFailoverAck::MergeFrom(const NodeFailoverAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeFailoverAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeFailoverAck::CopyFrom(const NodeFailoverAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeFailoverAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void NodeFailoverAck::Swap(NodeFailoverAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeFailoverAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeFailoverAck_descriptor_;
  metadata.reflection = NodeFailoverAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeGlOwnership::kOldGlIdFieldNumber;
const int TakeGlOwnership::kNewGlIdFieldNumber;
#endif  // !_MSC_VER

TakeGlOwnership::TakeGlOwnership()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeGlOwnership::InitAsDefaultInstance() {
}

TakeGlOwnership::TakeGlOwnership(const TakeGlOwnership& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeGlOwnership::SharedCtor() {
  _cached_size_ = 0;
  old_gl_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_gl_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeGlOwnership::~TakeGlOwnership() {
  SharedDtor();
}

void TakeGlOwnership::SharedDtor() {
  if (old_gl_id_ != &::google::protobuf::internal::kEmptyString) {
    delete old_gl_id_;
  }
  if (new_gl_id_ != &::google::protobuf::internal::kEmptyString) {
    delete new_gl_id_;
  }
  if (this != default_instance_) {
  }
}

void TakeGlOwnership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeGlOwnership::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeGlOwnership_descriptor_;
}

const TakeGlOwnership& TakeGlOwnership::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

TakeGlOwnership* TakeGlOwnership::default_instance_ = NULL;

TakeGlOwnership* TakeGlOwnership::New() const {
  return new TakeGlOwnership;
}

void TakeGlOwnership::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_old_gl_id()) {
      if (old_gl_id_ != &::google::protobuf::internal::kEmptyString) {
        old_gl_id_->clear();
      }
    }
    if (has_new_gl_id()) {
      if (new_gl_id_ != &::google::protobuf::internal::kEmptyString) {
        new_gl_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeGlOwnership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string old_gl_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_gl_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_gl_id().data(), this->old_gl_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_gl_id;
        break;
      }
      
      // required string new_gl_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_gl_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_gl_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_gl_id().data(), this->new_gl_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeGlOwnership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string old_gl_id = 1;
  if (has_old_gl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_gl_id().data(), this->old_gl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_gl_id(), output);
  }
  
  // required string new_gl_id = 2;
  if (has_new_gl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_gl_id().data(), this->new_gl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_gl_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeGlOwnership::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string old_gl_id = 1;
  if (has_old_gl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_gl_id().data(), this->old_gl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->old_gl_id(), target);
  }
  
  // required string new_gl_id = 2;
  if (has_new_gl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_gl_id().data(), this->new_gl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_gl_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeGlOwnership::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string old_gl_id = 1;
    if (has_old_gl_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_gl_id());
    }
    
    // required string new_gl_id = 2;
    if (has_new_gl_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_gl_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeGlOwnership::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeGlOwnership* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeGlOwnership*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeGlOwnership::MergeFrom(const TakeGlOwnership& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_gl_id()) {
      set_old_gl_id(from.old_gl_id());
    }
    if (from.has_new_gl_id()) {
      set_new_gl_id(from.new_gl_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeGlOwnership::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeGlOwnership::CopyFrom(const TakeGlOwnership& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeGlOwnership::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TakeGlOwnership::Swap(TakeGlOwnership* other) {
  if (other != this) {
    std::swap(old_gl_id_, other->old_gl_id_);
    std::swap(new_gl_id_, other->new_gl_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeGlOwnership::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeGlOwnership_descriptor_;
  metadata.reflection = TakeGlOwnership_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeGlOwnershipAck::kNewGlIdFieldNumber;
const int TakeGlOwnershipAck::kStatusFieldNumber;
#endif  // !_MSC_VER

TakeGlOwnershipAck::TakeGlOwnershipAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeGlOwnershipAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

TakeGlOwnershipAck::TakeGlOwnershipAck(const TakeGlOwnershipAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeGlOwnershipAck::SharedCtor() {
  _cached_size_ = 0;
  new_gl_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeGlOwnershipAck::~TakeGlOwnershipAck() {
  SharedDtor();
}

void TakeGlOwnershipAck::SharedDtor() {
  if (new_gl_id_ != &::google::protobuf::internal::kEmptyString) {
    delete new_gl_id_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void TakeGlOwnershipAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeGlOwnershipAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeGlOwnershipAck_descriptor_;
}

const TakeGlOwnershipAck& TakeGlOwnershipAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

TakeGlOwnershipAck* TakeGlOwnershipAck::default_instance_ = NULL;

TakeGlOwnershipAck* TakeGlOwnershipAck::New() const {
  return new TakeGlOwnershipAck;
}

void TakeGlOwnershipAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_gl_id()) {
      if (new_gl_id_ != &::google::protobuf::internal::kEmptyString) {
        new_gl_id_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeGlOwnershipAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string new_gl_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_gl_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_gl_id().data(), this->new_gl_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required .network_messages.errorStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeGlOwnershipAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string new_gl_id = 1;
  if (has_new_gl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_gl_id().data(), this->new_gl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->new_gl_id(), output);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeGlOwnershipAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string new_gl_id = 1;
  if (has_new_gl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_gl_id().data(), this->new_gl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_gl_id(), target);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeGlOwnershipAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string new_gl_id = 1;
    if (has_new_gl_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_gl_id());
    }
    
    // required .network_messages.errorStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeGlOwnershipAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeGlOwnershipAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeGlOwnershipAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeGlOwnershipAck::MergeFrom(const TakeGlOwnershipAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_gl_id()) {
      set_new_gl_id(from.new_gl_id());
    }
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeGlOwnershipAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeGlOwnershipAck::CopyFrom(const TakeGlOwnershipAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeGlOwnershipAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void TakeGlOwnershipAck::Swap(TakeGlOwnershipAck* other) {
  if (other != this) {
    std::swap(new_gl_id_, other->new_gl_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeGlOwnershipAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeGlOwnershipAck_descriptor_;
  metadata.reflection = TakeGlOwnershipAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetObjectVersion::kServiceIdFieldNumber;
#endif  // !_MSC_VER

GetObjectVersion::GetObjectVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetObjectVersion::InitAsDefaultInstance() {
}

GetObjectVersion::GetObjectVersion(const GetObjectVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetObjectVersion::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetObjectVersion::~GetObjectVersion() {
  SharedDtor();
}

void GetObjectVersion::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void GetObjectVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetObjectVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetObjectVersion_descriptor_;
}

const GetObjectVersion& GetObjectVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GetObjectVersion* GetObjectVersion::default_instance_ = NULL;

GetObjectVersion* GetObjectVersion::New() const {
  return new GetObjectVersion;
}

void GetObjectVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetObjectVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetObjectVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetObjectVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetObjectVersion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetObjectVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetObjectVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetObjectVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetObjectVersion::MergeFrom(const GetObjectVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetObjectVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectVersion::CopyFrom(const GetObjectVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetObjectVersion::Swap(GetObjectVersion* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetObjectVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetObjectVersion_descriptor_;
  metadata.reflection = GetObjectVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetObjectVersionAck::kServiceIdFieldNumber;
const int GetObjectVersionAck::kObjectVersionFieldNumber;
const int GetObjectVersionAck::kStatusFieldNumber;
#endif  // !_MSC_VER

GetObjectVersionAck::GetObjectVersionAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetObjectVersionAck::InitAsDefaultInstance() {
}

GetObjectVersionAck::GetObjectVersionAck(const GetObjectVersionAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetObjectVersionAck::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_version_ = GOOGLE_ULONGLONG(0);
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetObjectVersionAck::~GetObjectVersionAck() {
  SharedDtor();
}

void GetObjectVersionAck::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void GetObjectVersionAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetObjectVersionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetObjectVersionAck_descriptor_;
}

const GetObjectVersionAck& GetObjectVersionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GetObjectVersionAck* GetObjectVersionAck::default_instance_ = NULL;

GetObjectVersionAck* GetObjectVersionAck::New() const {
  return new GetObjectVersionAck;
}

void GetObjectVersionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
    object_version_ = GOOGLE_ULONGLONG(0);
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetObjectVersionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_version;
        break;
      }
      
      // required uint64 object_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_version_)));
          set_has_object_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // required bool status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetObjectVersionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  // required uint64 object_version = 2;
  if (has_object_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_version(), output);
  }
  
  // required bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetObjectVersionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  // required uint64 object_version = 2;
  if (has_object_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_version(), target);
  }
  
  // required bool status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetObjectVersionAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
    // required uint64 object_version = 2;
    if (has_object_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_version());
    }
    
    // required bool status = 3;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetObjectVersionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetObjectVersionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetObjectVersionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetObjectVersionAck::MergeFrom(const GetObjectVersionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_object_version()) {
      set_object_version(from.object_version());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetObjectVersionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectVersionAck::CopyFrom(const GetObjectVersionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectVersionAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GetObjectVersionAck::Swap(GetObjectVersionAck* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(object_version_, other->object_version_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetObjectVersionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetObjectVersionAck_descriptor_;
  metadata.reflection = GetObjectVersionAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeRejoinAfterRecovery::kNodeIdFieldNumber;
const int NodeRejoinAfterRecovery::kNodeIpFieldNumber;
const int NodeRejoinAfterRecovery::kNodePortFieldNumber;
#endif  // !_MSC_VER

NodeRejoinAfterRecovery::NodeRejoinAfterRecovery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeRejoinAfterRecovery::InitAsDefaultInstance() {
}

NodeRejoinAfterRecovery::NodeRejoinAfterRecovery(const NodeRejoinAfterRecovery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeRejoinAfterRecovery::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRejoinAfterRecovery::~NodeRejoinAfterRecovery() {
  SharedDtor();
}

void NodeRejoinAfterRecovery::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (node_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete node_ip_;
  }
  if (this != default_instance_) {
  }
}

void NodeRejoinAfterRecovery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRejoinAfterRecovery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRejoinAfterRecovery_descriptor_;
}

const NodeRejoinAfterRecovery& NodeRejoinAfterRecovery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeRejoinAfterRecovery* NodeRejoinAfterRecovery::default_instance_ = NULL;

NodeRejoinAfterRecovery* NodeRejoinAfterRecovery::New() const {
  return new NodeRejoinAfterRecovery;
}

void NodeRejoinAfterRecovery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
    if (has_node_ip()) {
      if (node_ip_ != &::google::protobuf::internal::kEmptyString) {
        node_ip_->clear();
      }
    }
    node_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeRejoinAfterRecovery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node_ip;
        break;
      }
      
      // required string node_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_ip().data(), this->node_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_node_port;
        break;
      }
      
      // required int32 node_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_port_)));
          set_has_node_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeRejoinAfterRecovery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  // required string node_ip = 2;
  if (has_node_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_ip().data(), this->node_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->node_ip(), output);
  }
  
  // required int32 node_port = 3;
  if (has_node_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->node_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeRejoinAfterRecovery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  // required string node_ip = 2;
  if (has_node_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_ip().data(), this->node_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_ip(), target);
  }
  
  // required int32 node_port = 3;
  if (has_node_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->node_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeRejoinAfterRecovery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
    // required string node_ip = 2;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_ip());
    }
    
    // required int32 node_port = 3;
    if (has_node_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRejoinAfterRecovery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeRejoinAfterRecovery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeRejoinAfterRecovery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRejoinAfterRecovery::MergeFrom(const NodeRejoinAfterRecovery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
    if (from.has_node_port()) {
      set_node_port(from.node_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeRejoinAfterRecovery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRejoinAfterRecovery::CopyFrom(const NodeRejoinAfterRecovery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRejoinAfterRecovery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void NodeRejoinAfterRecovery::Swap(NodeRejoinAfterRecovery* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(node_ip_, other->node_ip_);
    std::swap(node_port_, other->node_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeRejoinAfterRecovery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRejoinAfterRecovery_descriptor_;
  metadata.reflection = NodeRejoinAfterRecovery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeRejoinAfterRecoveryAck::kNodeIdFieldNumber;
const int NodeRejoinAfterRecoveryAck::kStatusFieldNumber;
#endif  // !_MSC_VER

NodeRejoinAfterRecoveryAck::NodeRejoinAfterRecoveryAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeRejoinAfterRecoveryAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

NodeRejoinAfterRecoveryAck::NodeRejoinAfterRecoveryAck(const NodeRejoinAfterRecoveryAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeRejoinAfterRecoveryAck::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRejoinAfterRecoveryAck::~NodeRejoinAfterRecoveryAck() {
  SharedDtor();
}

void NodeRejoinAfterRecoveryAck::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void NodeRejoinAfterRecoveryAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRejoinAfterRecoveryAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRejoinAfterRecoveryAck_descriptor_;
}

const NodeRejoinAfterRecoveryAck& NodeRejoinAfterRecoveryAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeRejoinAfterRecoveryAck* NodeRejoinAfterRecoveryAck::default_instance_ = NULL;

NodeRejoinAfterRecoveryAck* NodeRejoinAfterRecoveryAck::New() const {
  return new NodeRejoinAfterRecoveryAck;
}

void NodeRejoinAfterRecoveryAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeRejoinAfterRecoveryAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required .network_messages.errorStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeRejoinAfterRecoveryAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeRejoinAfterRecoveryAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeRejoinAfterRecoveryAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
    // required .network_messages.errorStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRejoinAfterRecoveryAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeRejoinAfterRecoveryAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeRejoinAfterRecoveryAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRejoinAfterRecoveryAck::MergeFrom(const NodeRejoinAfterRecoveryAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeRejoinAfterRecoveryAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRejoinAfterRecoveryAck::CopyFrom(const NodeRejoinAfterRecoveryAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRejoinAfterRecoveryAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void NodeRejoinAfterRecoveryAck::Swap(NodeRejoinAfterRecoveryAck* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeRejoinAfterRecoveryAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRejoinAfterRecoveryAck_descriptor_;
  metadata.reflection = NodeRejoinAfterRecoveryAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetClusterStatus::kServiceIdFieldNumber;
#endif  // !_MSC_VER

GetClusterStatus::GetClusterStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetClusterStatus::InitAsDefaultInstance() {
}

GetClusterStatus::GetClusterStatus(const GetClusterStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetClusterStatus::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterStatus::~GetClusterStatus() {
  SharedDtor();
}

void GetClusterStatus::SharedDtor() {
  if (service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete service_id_;
  }
  if (this != default_instance_) {
  }
}

void GetClusterStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterStatus_descriptor_;
}

const GetClusterStatus& GetClusterStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GetClusterStatus* GetClusterStatus::default_instance_ = NULL;

GetClusterStatus* GetClusterStatus::New() const {
  return new GetClusterStatus;
}

void GetClusterStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_id()) {
      if (service_id_ != &::google::protobuf::internal::kEmptyString) {
        service_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_id().data(), this->service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetClusterStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetClusterStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_id().data(), this->service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetClusterStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterStatus::MergeFrom(const GetClusterStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterStatus::CopyFrom(const GetClusterStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetClusterStatus::Swap(GetClusterStatus* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetClusterStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterStatus_descriptor_;
  metadata.reflection = GetClusterStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetClusterStatusAck_pair::kNodeIdFieldNumber;
const int GetClusterStatusAck_pair::kStatusEnumFieldNumber;
#endif  // !_MSC_VER

GetClusterStatusAck_pair::GetClusterStatusAck_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetClusterStatusAck_pair::InitAsDefaultInstance() {
}

GetClusterStatusAck_pair::GetClusterStatusAck_pair(const GetClusterStatusAck_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetClusterStatusAck_pair::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_enum_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterStatusAck_pair::~GetClusterStatusAck_pair() {
  SharedDtor();
}

void GetClusterStatusAck_pair::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void GetClusterStatusAck_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterStatusAck_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterStatusAck_pair_descriptor_;
}

const GetClusterStatusAck_pair& GetClusterStatusAck_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GetClusterStatusAck_pair* GetClusterStatusAck_pair::default_instance_ = NULL;

GetClusterStatusAck_pair* GetClusterStatusAck_pair::New() const {
  return new GetClusterStatusAck_pair;
}

void GetClusterStatusAck_pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
    status_enum_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterStatusAck_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status_enum;
        break;
      }
      
      // required .network_messages.NodeStatusEnum status_enum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (network_messages::NodeStatusEnum_IsValid(value)) {
            set_status_enum(static_cast< network_messages::NodeStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetClusterStatusAck_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }
  
  // required .network_messages.NodeStatusEnum status_enum = 2;
  if (has_status_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status_enum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetClusterStatusAck_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }
  
  // required .network_messages.NodeStatusEnum status_enum = 2;
  if (has_status_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status_enum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetClusterStatusAck_pair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
    // required .network_messages.NodeStatusEnum status_enum = 2;
    if (has_status_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_enum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterStatusAck_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterStatusAck_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterStatusAck_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterStatusAck_pair::MergeFrom(const GetClusterStatusAck_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_status_enum()) {
      set_status_enum(from.status_enum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterStatusAck_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterStatusAck_pair::CopyFrom(const GetClusterStatusAck_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterStatusAck_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetClusterStatusAck_pair::Swap(GetClusterStatusAck_pair* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(status_enum_, other->status_enum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetClusterStatusAck_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterStatusAck_pair_descriptor_;
  metadata.reflection = GetClusterStatusAck_pair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetClusterStatusAck::kNodeStatusListFieldNumber;
const int GetClusterStatusAck::kStatusFieldNumber;
#endif  // !_MSC_VER

GetClusterStatusAck::GetClusterStatusAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetClusterStatusAck::InitAsDefaultInstance() {
  status_ = const_cast< ::network_messages::errorStatus*>(&::network_messages::errorStatus::default_instance());
}

GetClusterStatusAck::GetClusterStatusAck(const GetClusterStatusAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetClusterStatusAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterStatusAck::~GetClusterStatusAck() {
  SharedDtor();
}

void GetClusterStatusAck::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void GetClusterStatusAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterStatusAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterStatusAck_descriptor_;
}

const GetClusterStatusAck& GetClusterStatusAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

GetClusterStatusAck* GetClusterStatusAck::default_instance_ = NULL;

GetClusterStatusAck* GetClusterStatusAck::New() const {
  return new GetClusterStatusAck;
}

void GetClusterStatusAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::network_messages::errorStatus::Clear();
    }
  }
  node_status_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterStatusAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network_messages.GetClusterStatusAck.pair node_status_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_status_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_status_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_node_status_list;
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required .network_messages.errorStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetClusterStatusAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .network_messages.GetClusterStatusAck.pair node_status_list = 1;
  for (int i = 0; i < this->node_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_status_list(i), output);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetClusterStatusAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .network_messages.GetClusterStatusAck.pair node_status_list = 1;
  for (int i = 0; i < this->node_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_status_list(i), target);
  }
  
  // required .network_messages.errorStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetClusterStatusAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .network_messages.errorStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  // repeated .network_messages.GetClusterStatusAck.pair node_status_list = 1;
  total_size += 1 * this->node_status_list_size();
  for (int i = 0; i < this->node_status_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_status_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterStatusAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterStatusAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterStatusAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterStatusAck::MergeFrom(const GetClusterStatusAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_status_list_.MergeFrom(from.node_status_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_status()) {
      mutable_status()->::network_messages::errorStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterStatusAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterStatusAck::CopyFrom(const GetClusterStatusAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterStatusAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < node_status_list_size(); i++) {
    if (!this->node_status_list(i).IsInitialized()) return false;
  }
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void GetClusterStatusAck::Swap(GetClusterStatusAck* other) {
  if (other != this) {
    node_status_list_.Swap(&other->node_status_list_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetClusterStatusAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterStatusAck_descriptor_;
  metadata.reflection = GetClusterStatusAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateContainer::kMetaFilePathFieldNumber;
const int UpdateContainer::kOperationFieldNumber;
#endif  // !_MSC_VER

UpdateContainer::UpdateContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateContainer::InitAsDefaultInstance() {
}

UpdateContainer::UpdateContainer(const UpdateContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateContainer::SharedCtor() {
  _cached_size_ = 0;
  meta_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateContainer::~UpdateContainer() {
  SharedDtor();
}

void UpdateContainer::SharedDtor() {
  if (meta_file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete meta_file_path_;
  }
  if (operation_ != &::google::protobuf::internal::kEmptyString) {
    delete operation_;
  }
  if (this != default_instance_) {
  }
}

void UpdateContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateContainer_descriptor_;
}

const UpdateContainer& UpdateContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

UpdateContainer* UpdateContainer::default_instance_ = NULL;

UpdateContainer* UpdateContainer::New() const {
  return new UpdateContainer;
}

void UpdateContainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_meta_file_path()) {
      if (meta_file_path_ != &::google::protobuf::internal::kEmptyString) {
        meta_file_path_->clear();
      }
    }
    if (has_operation()) {
      if (operation_ != &::google::protobuf::internal::kEmptyString) {
        operation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string meta_file_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meta_file_path().data(), this->meta_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operation;
        break;
      }
      
      // required string operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string meta_file_path = 1;
  if (has_meta_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta_file_path().data(), this->meta_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->meta_file_path(), output);
  }
  
  // required string operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->operation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string meta_file_path = 1;
  if (has_meta_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta_file_path().data(), this->meta_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->meta_file_path(), target);
  }
  
  // required string operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->operation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateContainer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string meta_file_path = 1;
    if (has_meta_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meta_file_path());
    }
    
    // required string operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateContainer::MergeFrom(const UpdateContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meta_file_path()) {
      set_meta_file_path(from.meta_file_path());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContainer::CopyFrom(const UpdateContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UpdateContainer::Swap(UpdateContainer* other) {
  if (other != this) {
    std::swap(meta_file_path_, other->meta_file_path_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateContainer_descriptor_;
  metadata.reflection = UpdateContainer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReleaseTransactionLock::kLockFieldNumber;
const int ReleaseTransactionLock::kOperationFieldNumber;
#endif  // !_MSC_VER

ReleaseTransactionLock::ReleaseTransactionLock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReleaseTransactionLock::InitAsDefaultInstance() {
}

ReleaseTransactionLock::ReleaseTransactionLock(const ReleaseTransactionLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReleaseTransactionLock::SharedCtor() {
  _cached_size_ = 0;
  lock_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReleaseTransactionLock::~ReleaseTransactionLock() {
  SharedDtor();
}

void ReleaseTransactionLock::SharedDtor() {
  if (lock_ != &::google::protobuf::internal::kEmptyString) {
    delete lock_;
  }
  if (operation_ != &::google::protobuf::internal::kEmptyString) {
    delete operation_;
  }
  if (this != default_instance_) {
  }
}

void ReleaseTransactionLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseTransactionLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseTransactionLock_descriptor_;
}

const ReleaseTransactionLock& ReleaseTransactionLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

ReleaseTransactionLock* ReleaseTransactionLock::default_instance_ = NULL;

ReleaseTransactionLock* ReleaseTransactionLock::New() const {
  return new ReleaseTransactionLock;
}

void ReleaseTransactionLock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lock()) {
      if (lock_ != &::google::protobuf::internal::kEmptyString) {
        lock_->clear();
      }
    }
    if (has_operation()) {
      if (operation_ != &::google::protobuf::internal::kEmptyString) {
        operation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReleaseTransactionLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lock().data(), this->lock().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operation;
        break;
      }
      
      // required string operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReleaseTransactionLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string lock = 1;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lock().data(), this->lock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lock(), output);
  }
  
  // required string operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->operation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReleaseTransactionLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string lock = 1;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lock().data(), this->lock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lock(), target);
  }
  
  // required string operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->operation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReleaseTransactionLock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string lock = 1;
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lock());
    }
    
    // required string operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseTransactionLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReleaseTransactionLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReleaseTransactionLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReleaseTransactionLock::MergeFrom(const ReleaseTransactionLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lock()) {
      set_lock(from.lock());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReleaseTransactionLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseTransactionLock::CopyFrom(const ReleaseTransactionLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseTransactionLock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReleaseTransactionLock::Swap(ReleaseTransactionLock* other) {
  if (other != this) {
    std::swap(lock_, other->lock_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReleaseTransactionLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseTransactionLock_descriptor_;
  metadata.reflection = ReleaseTransactionLock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusAck::kStatusFieldNumber;
#endif  // !_MSC_VER

StatusAck::StatusAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusAck::InitAsDefaultInstance() {
}

StatusAck::StatusAck(const StatusAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusAck::~StatusAck() {
  SharedDtor();
}

void StatusAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusAck_descriptor_;
}

const StatusAck& StatusAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

StatusAck* StatusAck::default_instance_ = NULL;

StatusAck* StatusAck::New() const {
  return new StatusAck;
}

void StatusAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusAck::MergeFrom(const StatusAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusAck::CopyFrom(const StatusAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusAck::IsInitialized() const {
  
  return true;
}

void StatusAck::Swap(StatusAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusAck_descriptor_;
  metadata.reflection = StatusAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeAdditionFinalAck::kStatusFieldNumber;
#endif  // !_MSC_VER

NodeAdditionFinalAck::NodeAdditionFinalAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeAdditionFinalAck::InitAsDefaultInstance() {
}

NodeAdditionFinalAck::NodeAdditionFinalAck(const NodeAdditionFinalAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeAdditionFinalAck::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeAdditionFinalAck::~NodeAdditionFinalAck() {
  SharedDtor();
}

void NodeAdditionFinalAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeAdditionFinalAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeAdditionFinalAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeAdditionFinalAck_descriptor_;
}

const NodeAdditionFinalAck& NodeAdditionFinalAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fcommunication_5fprotocol_2fmessage_5fbinding_2eproto();  return *default_instance_;
}

NodeAdditionFinalAck* NodeAdditionFinalAck::default_instance_ = NULL;

NodeAdditionFinalAck* NodeAdditionFinalAck::New() const {
  return new NodeAdditionFinalAck;
}

void NodeAdditionFinalAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeAdditionFinalAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeAdditionFinalAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeAdditionFinalAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeAdditionFinalAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeAdditionFinalAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeAdditionFinalAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeAdditionFinalAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeAdditionFinalAck::MergeFrom(const NodeAdditionFinalAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeAdditionFinalAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAdditionFinalAck::CopyFrom(const NodeAdditionFinalAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAdditionFinalAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NodeAdditionFinalAck::Swap(NodeAdditionFinalAck* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeAdditionFinalAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeAdditionFinalAck_descriptor_;
  metadata.reflection = NodeAdditionFinalAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network_messages

// @@protoc_insertion_point(global_scope)
